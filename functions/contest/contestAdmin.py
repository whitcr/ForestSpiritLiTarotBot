import asyncio
import logging
import random
from datetime import datetime
from typing import List

from aiogram import Bot, Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter

from database import execute_query, execute_select, execute_select_all
from filters.baseFilters import IsAdmin
from functions.contest.contest import get_valid_referrals_count, check_subscription

router = Router()


class AdminStates(StatesGroup):
    waiting_for_broadcast_text = State()
    waiting_for_broadcast_file = State()
    waiting_for_prize_description = State()
    waiting_for_referral_prize = State()
    waiting_for_min_referrals = State()
    waiting_for_winners_count = State()
    waiting_for_end_date = State()


def get_admin_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    builder.add(InlineKeyboardButton(text = "üì£ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data = "admin_broadcast"))
    builder.add(InlineKeyboardButton(text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—É—Ä—Å–∞", callback_data = "admin_settings"))
    builder.add(InlineKeyboardButton(text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data = "admin_stats"))
    builder.add(InlineKeyboardButton(text = "üèÜ –í—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π", callback_data = "admin_winners"))
    builder.add(InlineKeyboardButton(text = "üîÑ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å", callback_data = "admin_end_contest"))

    builder.adjust(1)
    return builder.as_markup()


def get_settings_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    builder.add(InlineKeyboardButton(text = "üèÜ –û–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–∞", callback_data = "settings_prize"))
    builder.add(InlineKeyboardButton(text = "üéÅ –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–∞", callback_data = "settings_ref_prize"))
    builder.add(InlineKeyboardButton(text = "üë• –ú–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data = "settings_min_refs"))
    builder.add(InlineKeyboardButton(text = "üëë –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π", callback_data = "settings_winners_count"))
    builder.add(InlineKeyboardButton(text = "üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞", callback_data = "settings_end_date"))
    builder.add(InlineKeyboardButton(text = "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data = "admin_menu"))

    builder.adjust(1)
    return builder.as_markup()


def get_broadcast_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    builder.add(InlineKeyboardButton(text = "üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data = "broadcast_text"))
    builder.add(InlineKeyboardButton(text = "üìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data = "broadcast_file"))
    builder.add(InlineKeyboardButton(text = "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data = "broadcast_send"))
    builder.add(InlineKeyboardButton(text = "‚ùå –û—Ç–º–µ–Ω–∞", callback_data = "admin_menu"))

    builder.adjust(1)
    return builder.as_markup()


async def select_winners(count: int) -> List[int]:
    all_participants = await execute_select_all("SELECT user_id FROM contest_users")

    if not all_participants:
        return []

    user_ids = [row[0] for row in all_participants]

    winners_count = min(count, len(user_ids))
    winners = random.sample(user_ids, winners_count)

    return winners


def get_cancel_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text = "‚ùå –û—Ç–º–µ–Ω–∞", callback_data = "admin_menu"))
    return builder.as_markup()


@router.message(IsAdmin(), Command("admin"))
async def admin_command(message: types.Message):
    await message.answer(
        "üëë –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–º",
        reply_markup = get_admin_keyboard()
    )


@router.callback_query(F.data == "admin_menu")
async def admin_menu_callback(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üëë –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–º",
        reply_markup = get_admin_keyboard()
    )
    await callback.answer()


@router.callback_query(IsAdmin(), F.data == "admin_settings")
async def admin_settings_callback(callback: types.CallbackQuery):
    settings = await execute_select_all(
        "SELECT prize_description, referral_prize_description, min_referrals, winners_count, ends_at, is_active FROM contest_settings ORDER BY id DESC LIMIT 1")

    if settings:
        prize, ref_prize, min_refs, winners, ends_at, is_active = settings[0]
        status = "–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ" if is_active else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω ‚ùå"
        end_date = ends_at.strftime("%d.%m.%Y") if ends_at else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    else:
        prize = "Not set"
        ref_prize = "Not set"
        min_refs = 3
        winners = 1
        end_date = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        status = "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω ‚ùå"

    await callback.message.edit_text(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—É—Ä—Å–∞\n\n"
        f"–°—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—É—Ä—Å–∞: {status}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞: {prize}\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑: {ref_prize}\n"
        f"–ú–∏–Ω. –∫–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {min_refs}\n"
        f"–ö–æ–ª-–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {winners}\n"
        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup = get_settings_keyboard()
    )
    await callback.answer()


@router.callback_query(IsAdmin(), F.data == "admin_stats")
async def admin_stats_callback(callback: types.CallbackQuery, bot: Bot):
    total_users = await execute_select("SELECT COUNT(*) FROM contest_users WHERE ticket_number IS NOT NULL")
    total_users = total_users if total_users else 0

    valid_referrers = 0
    settings = await execute_select("SELECT min_referrals FROM contest_settings ORDER BY id DESC LIMIT 1")
    min_referrals = settings if settings else 3

    all_users = await execute_select_all("SELECT user_id FROM contest_users WHERE ticket_number IS NOT NULL")
    for user_row in all_users:
        user_id = user_row[0]
        valid_count = await get_valid_referrals_count(user_id, bot)
        if valid_count >= min_referrals:
            valid_referrers += 1

        top_referrers = []
        top_referrers_data = await execute_select_all(
            """
            SELECT u.user_id, u.username, u.first_name, COUNT(r.user_id) as ref_count
            FROM contest_users u
            LEFT JOIN contest_users r ON u.user_id = r.referrer_id
            WHERE u.ticket_number IS NOT NULL
            GROUP BY u.user_id, u.username, u.first_name
            ORDER BY ref_count DESC
            LIMIT 5
            """
        )

        for row in top_referrers_data:
            user_id, username, first_name, ref_count = row
            if ref_count > 0:
                display_name = f"@{username}" if username else first_name
                top_referrers.append(f"{display_name}: {ref_count} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π")

        top_referrers_text = "\n".join(top_referrers) if top_referrers else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        unsubscribed_count = 0
        for user_row in all_users:
            user_id = user_row[0]
            if not await check_subscription(user_id, bot):
                unsubscribed_count += 1

        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text = "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data = "admin_menu"))

        await callback.message.edit_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞\n\n"
            f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø—Ä–∏–∑–∞–º–∏ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {valid_referrers}\n"
            f"–û—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {unsubscribed_count}\n\n"
            f"–¢–æ–ø 5 –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º:\n{top_referrers_text}",
            reply_markup = builder.as_markup()
        )
        await callback.answer()


@router.callback_query(IsAdmin(), F.data == "admin_broadcast")
async def admin_broadcast_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()

    await callback.message.edit_text(
        "üì£ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω–∫—É—Ä—Å–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Å—Å—ã–ª–∫—É:",
        reply_markup = get_broadcast_keyboard()
    )
    await callback.answer()


@router.callback_query(IsAdmin(), F.data == "broadcast_text")
async def broadcast_text_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_broadcast_text)

    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup = get_cancel_keyboard()
    )
    await callback.answer()


@router.message(IsAdmin(), StateFilter(AdminStates.waiting_for_broadcast_text))
async def process_broadcast_text(message: types.Message, state: FSMContext):
    await state.update_data(broadcast_text = message.text)
    await state.set_state(None)

    await message.answer(
        f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:\n\n{message.text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup = get_broadcast_keyboard()
    )


@router.callback_query(IsAdmin(), F.data == "broadcast_file")
async def broadcast_file_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_broadcast_file)

    await callback.message.edit_text(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç):",
        reply_markup = get_cancel_keyboard()
    )
    await callback.answer()


@router.message(IsAdmin(), StateFilter(AdminStates.waiting_for_broadcast_file))
async def process_broadcast_file(message: types.Message, state: FSMContext):
    file_id = None
    file_type = None

    if message.photo:
        file_id = message.photo[-1].file_id
        file_type = "photo"
    elif message.video:
        file_id = message.video.file_id
        file_type = "video"
    elif message.document:
        file_id = message.document.file_id
        file_type = "document"
    elif message.animation:
        file_id = message.animation.file_id
        file_type = "animation"

    if file_id:
        await state.update_data(broadcast_file_id = file_id, broadcast_file_type = file_type)
        await state.set_state(None)

        await message.answer(
            f"‚úÖ –§–∞–π–ª ({file_type}) –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ä–∞—Å—Å—ã–ª–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup = get_broadcast_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            reply_markup = get_cancel_keyboard()
        )


@router.callback_query(IsAdmin(), F.data == "broadcast_send")
async def broadcast_send_callback(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    broadcast_text = data.get("broadcast_text", "")
    file_id = data.get("broadcast_file_id")
    file_type = data.get("broadcast_file_type")

    if not broadcast_text and not file_id:
        await callback.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!", show_alert = True)
        return

    all_users = await execute_select_all("SELECT user_id FROM contest_users WHERE ticket_number IS NOT NULL")

    if not all_users:
        await callback.answer("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!", show_alert = True)
        return

    await execute_query(
        "INSERT INTO contest_messages (message_text, file_id, file_type) VALUES ($1,$2, $3)",
        (broadcast_text, file_id, file_type)
    )

    await callback.message.edit_text("üì§ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")

    success_count = 0
    fail_count = 0

    for user_row in all_users:
        user_id = user_row[0]
        try:
            if file_id:
                if file_type == "photo":
                    await bot.send_photo(user_id, photo = file_id, caption = broadcast_text)
                elif file_type == "video":
                    await bot.send_video(user_id, video = file_id, caption = broadcast_text)
                elif file_type == "document":
                    await bot.send_document(user_id, document = file_id, caption = broadcast_text)
                elif file_type == "animation":
                    await bot.send_animation(user_id, animation = file_id, caption = broadcast_text)
            else:
                await bot.send_message(user_id, broadcast_text)

            success_count += 1
            await asyncio.sleep(0.05)
        except Exception as e:
            logging.error(f"Failed to send message to {user_id}: {e}")
            fail_count += 1

    await callback.message.edit_text(
        f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fail_count}",
        reply_markup = get_admin_keyboard()
    )

    await state.clear()
    await callback.answer()


@router.callback_query(IsAdmin(), F.data == "admin_winners")
async def admin_winners_callback(callback: types.CallbackQuery):
    settings = await execute_select_all(
        "SELECT winners_count, is_active FROM contest_settings ORDER BY id DESC LIMIT 1")

    if not settings:
        await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", show_alert = True)
        return

    winners_count, is_active = settings[0]

    if is_active:
        await callback.answer("–ö–æ–Ω–∫—É—Ä—Å –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω! –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.", show_alert = True)
        return

    winners = await select_winners(winners_count)

    if not winners:
        await callback.answer("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!", show_alert = True)
        return

    winners_text = ""
    for i, winner_id in enumerate(winners, 1):
        winner_info = await execute_select(
            "SELECT username, first_name, ticket_number FROM contest_users WHERE user_id = %s",
            (winner_id,)
        )

        if winner_info:
            username, first_name, ticket = winner_info
            display_name = f"@{username}" if username else first_name
            winners_text += f"{i}. {display_name} (–ë–∏–ª–µ—Ç #{ticket})\n"

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text = "üîÑ –í—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data = "admin_winners"))
    builder.add(InlineKeyboardButton(text = "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data = "admin_menu"))
    builder.adjust(1)

    await callback.message.edit_text(
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∫–æ–Ω–∫—É—Ä—Å–∞:\n\n{winners_text}\n\n"
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π! –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º–∏, —á—Ç–æ–±—ã –≤—Ä—É—á–∏—Ç—å –ø—Ä–∏–∑—ã.",
        reply_markup = builder.as_markup()
    )
    await callback.answer()


@router.callback_query(IsAdmin(), F.data == "admin_end_contest")
async def admin_end_contest_callback(callback: types.CallbackQuery):
    status = await execute_select("SELECT is_active FROM contest_settings ORDER BY id DESC LIMIT 1")

    if not status:
        await callback.answer("–ö–æ–Ω–∫—É—Ä—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω!", show_alert = True)
        return

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text = "‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data = "confirm_end_contest"))
    builder.add(InlineKeyboardButton(text = "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data = "admin_menu"))
    builder.adjust(1)

    await callback.message.edit_text(
        "üö´ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å?\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å.",
        reply_markup = builder.as_markup()
    )
    await callback.answer()


@router.callback_query(IsAdmin(), F.data == "confirm_end_contest")
async def confirm_end_contest_callback(callback: types.CallbackQuery, bot: Bot):
    await execute_query(
        "UPDATE contest_settings SET is_active = FALSE, ends_at = $1 WHERE id = (SELECT id FROM contest_settings ORDER BY id DESC LIMIT 1)",
        (datetime.now(),)
    )

    all_users = await execute_select_all("SELECT user_id FROM contest_users WHERE ticket_number IS NOT NULL")

    for user_row in all_users:
        try:
            await bot.send_message(
                user_row[0],
                "üèÅ –ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –°–∫–æ—Ä–æ –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
            )
            await asyncio.sleep(0.05)
        except Exception as e:
            logging.error(f"Failed to notify user {user_row[0]}: {e}")

    await callback.message.edit_text(
        "‚úÖ –ö–æ–Ω–∫—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.",
        reply_markup = get_admin_keyboard()
    )
    await callback.answer()


# Settings handlers
@router.callback_query(IsAdmin(), F.data == "settings_prize")
async def settings_prize_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_prize_description)

    await callback.message.edit_text(
        "üèÜ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–∞ –∫–æ–Ω–∫—É—Ä—Å–∞:",
        reply_markup = get_cancel_keyboard()
    )
    await callback.answer()


@router.message(IsAdmin(), StateFilter(AdminStates.waiting_for_prize_description))
async def process_prize_description(message: types.Message, state: FSMContext):
    await execute_query(
        "UPDATE contest_settings SET prize_description = $1 WHERE id = (SELECT id FROM contest_settings ORDER BY id DESC LIMIT 1)",
        (message.text,)
    )

    await state.clear()
    await message.answer(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:\n\n{message.text}",
        reply_markup = get_settings_keyboard()
    )


@router.callback_query(IsAdmin(), F.data == "settings_ref_prize")
async def settings_ref_prize_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_referral_prize)

    await callback.message.edit_text(
        "üéÅ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π:",
        reply_markup = get_cancel_keyboard()
    )
    await callback.answer()


@router.message(IsAdmin(), StateFilter(AdminStates.waiting_for_referral_prize))
async def process_referral_prize(message: types.Message, state: FSMContext):
    await execute_query(
        "UPDATE contest_settings SET referral_prize_description = $1 WHERE id = (SELECT id FROM contest_settings ORDER BY id DESC LIMIT 1)",
        (message.text,)
    )

    await state.clear()
    await message.answer(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:\n\n{message.text}",
        reply_markup = get_settings_keyboard()
    )


@router.callback_query(IsAdmin(), F.data == "settings_min_refs")
async def settings_min_refs_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_min_referrals)

    await callback.message.edit_text(
        "üë• –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ (—á–∏—Å–ª–æ):",
        reply_markup = get_cancel_keyboard()
    )
    await callback.answer()


@router.message(IsAdmin(), StateFilter(AdminStates.waiting_for_min_referrals))
async def process_min_referrals(message: types.Message, state: FSMContext):
    try:
        min_refs = int(message.text)
        if min_refs < 1:
            await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        await execute_query(
            "UPDATE contest_settings SET min_referrals = %s WHERE id = (SELECT id FROM contest_settings ORDER BY id DESC LIMIT 1)",
            (min_refs,)
        )

        await state.clear()
        await message.answer(
            f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {min_refs}",
            reply_markup = get_settings_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")


@router.callback_query(IsAdmin(), F.data == "settings_winners_count")
async def settings_winners_count_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_winners_count)

    await callback.message.edit_text(
        "üëë –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∫–æ–Ω–∫—É—Ä—Å–∞ (—á–∏—Å–ª–æ):",
        reply_markup = get_cancel_keyboard()
    )
    await callback.answer()


@router.message(IsAdmin(), StateFilter(AdminStates.waiting_for_winners_count))
async def process_winners_count(message: types.Message, state: FSMContext):
    try:
        winners_count = int(message.text)
        if winners_count < 1:
            await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        await execute_query(
            "UPDATE contest_settings SET winners_count = $1 WHERE id = (SELECT id FROM contest_settings ORDER BY id DESC LIMIT 1)",
            (winners_count,)
        )

        await state.clear()
        await message.answer(
            f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {winners_count}",
            reply_markup = get_settings_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")


@router.callback_query(IsAdmin(), F.data == "settings_end_date")
async def settings_end_date_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_end_date)

    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
        reply_markup = get_cancel_keyboard()
    )
    await callback.answer()


@router.message(IsAdmin(), StateFilter(AdminStates.waiting_for_end_date))
async def process_end_date(message: types.Message, state: FSMContext):
    try:
        end_date = datetime.strptime(message.text, "%d.%m.%Y")

        await execute_query(
            "UPDATE contest_settings SET ends_at = $1 WHERE id = (SELECT id FROM contest_settings ORDER BY id DESC LIMIT 1)",
            (end_date,)
        )

        await state.clear()
        await message.answer(
            f"‚úÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {end_date.strftime('%d.%m.%Y')}",
            reply_markup = get_settings_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
