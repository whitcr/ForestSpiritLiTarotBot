from aiogram import Bot, types, F, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, PollAnswer, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
import json
import random
import logging
from config import load_config

from database import execute_query, execute_select, execute_select_all
from filters.baseFilters import IsAdmin

router = Router()
config = load_config()
logger_chat = config.tg_bot.logger_chat


async def init_db():
    await execute_query(
        "CREATE TABLE IF NOT EXISTS quiz_settings (id SERIAL PRIMARY KEY,is_active BOOLEAN DEFAULT TRUE,created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)",
        ())

    await execute_query('''
            CREATE TABLE IF NOT EXISTS quiz_participants (
                id SERIAL PRIMARY KEY,
                user_id BIGINT UNIQUE NOT NULL,
                username TEXT,
                full_name TEXT,
                question_num INTEGER DEFAULT 1,
                correct_answers INTEGER DEFAULT 0,
                is_timeout BOOLEAN DEFAULT FALSE,
                is_completed BOOLEAN DEFAULT FALSE,
                current_correct_index INTEGER DEFAULT 0,
                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                completed_at TIMESTAMP
            )
        ''', ())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
    settings = await execute_select_all('SELECT * FROM quiz_settings LIMIT 1')
    if not settings:
        await execute_query('INSERT INTO quiz_settings (is_active) VALUES (TRUE)')


def load_quiz_data():
    try:
        with open('functions/quiz/quiz.json', 'r', encoding = 'utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        logging.error("Quiz data file not found!")
        return None


start_button = InlineKeyboardButton(text = "–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data = "start_quiz")
start_quiz_keyboard = InlineKeyboardMarkup(inline_keyboard = [[start_button]])

admin_keyboard = ReplyKeyboardMarkup(
    keyboard = [
        [KeyboardButton(text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")],
        [KeyboardButton(text = "–í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")],
        [KeyboardButton(text = "–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")]
    ],
    resize_keyboard = True
)


@router.message(F.text.lower().startswith("–≤–∏–∫"))
async def start_command(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    await init_db()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã

    settings = await execute_select_all('SELECT * FROM quiz_settings ORDER BY id DESC LIMIT 1')
    if not settings[0] or not settings[0]['is_active']:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return

    user = f"<a href='tg://user?id={user_id}'>{message.from_user.full_name}</a>"

    await message.answer(
        f'<b>–ü—Ä–∏–≤–µ—Ç {user}, —Ä–∞–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ!</b> '
        f'\n\n–°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π üòª\n'
        f'–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏ —á–µ–º –±–æ–ª—å—à–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ‚Äî —Ç–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –ø—Ä–∏–∑üôÄ\n\n'
        f'<b>–ö–æ–≥–¥–∞ –¥–æ–π–¥–µ—à—å –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî —Ç–≤–æ–π –ø—Ä–∏–∑ —É–∂–µ –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å —Ç–µ–±—è</b> üòé'
    )

    await message.answer(
        f'<b>–£—Å–ª–æ–≤–∏—è –í–∏–∫—Ç–æ—Ä–∏–Ω—ã:</b>'
        f'\n\n–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ù–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–æ–¥–∏—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç. '
        f'–ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ–ø—É—â–µ–Ω–æ ‚Äî –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è :)'
        f'\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ! –í–∏–∫—Ç–æ—Ä–∏–Ω—É –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑! –ü–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ –Ω–∞—á–∞–ª–∏ ‚Äî –ø—Ä–∏–¥–µ—Ç—Å—è –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å—Ä–∞–∑—É, '
        f'—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø—Ä–∏–∑ :)</b>'
        f'\n\n–ù—É —á—Ç–æ, –ø–æ–≥–Ω–∞–ª–∏?',
        reply_markup = start_quiz_keyboard
    )


async def timeout_task(bot, user_id: int, question_num: int, sleep_time: int = 300):
    try:
        await asyncio.sleep(sleep_time)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –Ω–∞ —Ç–æ–º –∂–µ –≤–æ–ø—Ä–æ—Å–µ
        user = await execute_select_all(
            'SELECT * FROM quiz_participants WHERE user_id = $1', (user_id,)
        )

        user = user[0]

        if user and user['question_num'] == question_num and not user['is_completed'] and not user['is_timeout']:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            await execute_query(
                'UPDATE quiz_participants SET is_timeout = TRUE, is_completed = TRUE, completed_at = CURRENT_TIMESTAMP WHERE user_id = $1',
                (user_id,)
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(
                user_id,
                f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏ –≤—ã–±—ã–≤–∞–µ—à—å –∏–∑ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. '
                f'–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ —Ç–µ–±—è —Ç—É—Ç —É–≤–∏–¥–µ—Ç—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç—ã —Å–º–æ–∂–µ—à—å –¥–æ–π—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞, –∞ –ø–æ–∫–∞ —á—Ç–æ ‚Äî –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á‚ô•Ô∏è'
            )

            # –õ–æ–≥–∏—Ä—É–µ–º –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            await log_to_chat(bot,
                              f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['full_name']} (ID: {user_id}) –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_num}")
    except Exception as e:
        logging.error(f"Error in timeout task: {e}")


async def log_to_chat(bot, message: str):
    await bot.send_message(logger_chat, f"üìù {message}")


@router.callback_query(F.data == "start_quiz")
async def start_quiz(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    user_id = callback.from_user.id

    # Check if in private chat
    if callback.message.chat.type != 'private':
        await callback.message.answer("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –õ–∏—á–Ω—ã—Ö –°–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã

    settings = await execute_select_all('SELECT * FROM quiz_settings ORDER BY id DESC LIMIT 1')
    settings = settings[0]
    if not settings or not settings['is_active']:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
    user = await execute_select_all(
        'SELECT * FROM quiz_participants WHERE user_id = $1',
        (user_id,)
    )
    user = user[0] if user else None

    if user and user['is_completed']:
        await callback.message.answer('–ê—Ö —Ç—ã —Ö–∏—Ç—Ä–∞—è –∑–º–µ–π–∫–∞! –í—Å—ë—ë—ë, –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è üòú')
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—á–∏–Ω–∞–ª, –Ω–æ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if user:
        await execute_query(
            '''
            UPDATE quiz_participants 
            SET question_num = 1, correct_answers = 0, is_timeout = FALSE, 
                is_completed = FALSE, started_at = CURRENT_TIMESTAMP, completed_at = NULL 
            WHERE user_id = $1
            ''',
            (user_id,)
        )
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await execute_query(
            '''
            INSERT INTO quiz_participants (user_id, username, full_name) 
            VALUES ($1, $2, $3)
            ''',
            (user_id, callback.from_user.username, callback.from_user.full_name)
        )

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    await log_to_chat(bot, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.full_name} (ID: {user_id}) –Ω–∞—á–∞–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")

    # Start the quiz
    try:
        await send_question(user_id, state, bot)
    except Exception as e:
        logging.error(f"Error starting quiz: {e}")
        await callback.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


async def send_question(user_id: int, state: FSMContext, bot):
    quiz_data = load_quiz_data()
    if not quiz_data:
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –ë–î

    user = await execute_select_all(
        'SELECT * FROM quiz_participants WHERE user_id = $1',
        (user_id,)
    )
    user = user[0]

    if not user:
        logging.error(f"User {user_id} not found in database")
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å–Ω–æ–≤–∞.")
        return

    question_num = user['question_num']

    # Check if we've reached the end of the quiz
    if question_num > len(quiz_data["questions"]):
        await end_quiz(user_id, bot)
        return

    # Get question data
    question_data = quiz_data["questions"][question_num - 1]
    question_text = question_data["question"]
    correct_answer = question_data["correct_answer"]
    incorrect_answers = question_data["incorrect_answers"]

    # Create answers list with all options
    answers = [correct_answer] + incorrect_answers
    random.shuffle(answers)  # Randomize answer order

    # Find the index of the correct answer
    correct_index = answers.index(correct_answer)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –ë–î
    await execute_query(
        'UPDATE quiz_participants SET current_correct_index = $1 WHERE user_id = $2',
        (correct_index, user_id)
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    poll = await bot.send_poll(
        user_id,
        question_text,
        answers,
        type = 'quiz',
        correct_option_id = correct_index,
        is_anonymous = False,
        open_period = 300  # 5 minutes
    )

    # Save poll ID in state
    await state.update_data(poll_id = poll.message_id)

    # Start timeout task
    asyncio.create_task(timeout_task(bot, user_id, question_num))


@router.poll_answer()
async def handle_poll_answer(poll_answer: PollAnswer, state: FSMContext, bot: Bot):
    user_id = poll_answer.user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î

    user = await execute_select_all(
        'SELECT * FROM quiz_participants WHERE user_id = $1',
        (user_id,)
    )
    user = user[0]

    if not user:
        logging.error(f"User {user_id} not found in database")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏ –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    question_num = user['question_num']
    correct_index = user['current_correct_index']

    # –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–∞—É—Ç, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª
    await execute_query(
        'UPDATE quiz_participants SET is_timeout = FALSE WHERE user_id = $1',
        (user_id,)
    )

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    quiz_data = load_quiz_data()
    if not quiz_data:
        logging.error("Failed to load quiz data")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    question_data = quiz_data["questions"][question_num - 1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    selected_option = poll_answer.option_ids[0]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î

    if selected_option == correct_index:
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await execute_query(
            'UPDATE quiz_participants SET correct_answers = correct_answers + 1 WHERE user_id = $1',
            (user_id,)
        )
        await bot.send_message(user_id, question_data["correct_text"])

        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await log_to_chat(bot,
                          f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['full_name']} (ID: {user_id}) –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_num}")
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await bot.send_message(user_id, question_data["wrong_text"])

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await log_to_chat(bot,
                          f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['full_name']} (ID: {user_id}) –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_num}")

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
    await execute_query(
        'UPDATE quiz_participants SET question_num = question_num + 1 WHERE user_id = $1',
        (user_id,)
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await send_question(user_id, state, bot)


async def end_quiz(user_id: int, bot):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await execute_select_all(
        'SELECT * FROM quiz_participants WHERE user_id = $1',
        (user_id,)
    )
    user = user[0]

    if not user:
        logging.error(f"User {user_id} not found in database")
        return

    # –û—Ç–º–µ—á–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
    await execute_query(
        'UPDATE quiz_participants SET is_completed = TRUE, completed_at = CURRENT_TIMESTAMP WHERE user_id = $1',
        (user_id,)
    )

    correct_answers = user['correct_answers']

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    quiz_data = load_quiz_data()
    if not quiz_data:
        logging.error("Failed to load quiz data")
        return

    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    prize = ""
    for prize_tier in quiz_data["prizes"]:
        min_correct = prize_tier["min_correct"]
        max_correct = prize_tier["max_correct"]

        if min_correct <= correct_answers <= max_correct:
            prize = prize_tier["prize_text"]
            break

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await bot.send_message(
        user_id,
        f'<b>–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>'
        f'\n\n{correct_answers} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!'
        f'\n<b>–¢–≤–æ–π –ø—Ä–∏–∑:</b>'
        f'\n\n{prize}'
        f'\n\n<b>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!</b> ‚ô•Ô∏è'
    )

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    await log_to_chat(
        bot,
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['full_name']} (ID: {user_id}) –∑–∞–≤–µ—Ä—à–∏–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {correct_answers} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. –ü—Ä–∏–∑: {prize}"
    )


@router.message(IsAdmin(), F.text == "!–≤–∏–∫")
async def admin_command(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã!", reply_markup = admin_keyboard)


@router.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def show_statistics(message: types.Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_participants = await execute_select('SELECT COUNT(*) FROM quiz_participants')
    completed_participants = await execute_select('SELECT COUNT(*) FROM quiz_participants WHERE is_completed = TRUE')
    active_participants = await execute_select('SELECT COUNT(*) FROM quiz_participants WHERE is_completed = FALSE')

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º
    avg_correct = await execute_select(
        'SELECT AVG(correct_answers) FROM quiz_participants WHERE is_completed = TRUE')
    max_correct = await execute_select(
        'SELECT MAX(correct_answers) FROM quiz_participants WHERE is_completed = TRUE')

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    settings = await execute_select_all('SELECT * FROM quiz_settings ORDER BY id DESC LIMIT 1')
    settings = settings[0]
    quiz_status = "–ê–∫—Ç–∏–≤–Ω–∞" if settings and settings['is_active'] else "–û—Ç–∫–ª—é—á–µ–Ω–∞"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_message = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã</b>\n\n"
        f"üîπ –°—Ç–∞—Ç—É—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: <b>{quiz_status}</b>\n"
        f"üîπ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{total_participants}</b>\n"
        f"üîπ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É: <b>{completed_participants}</b>\n"
        f"üîπ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{active_participants}</b>\n"
        f"üîπ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{avg_correct:.1f}</b>\n"
        f"üîπ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{max_correct}</b>\n"
    )

    await message.answer(stats_message, parse_mode = "HTML")


@router.message(F.text == "–í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
async def toggle_quiz(message: types.Message):
    user_id = message.from_user.id

    settings = await execute_select_all('SELECT * FROM quiz_settings ORDER BY id DESC LIMIT 1')
    settings = settings[0]
    current_status = settings and settings['is_active']

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è
    buttons = [
        [InlineKeyboardButton(text = "‚úÖ –í–∫–ª—é—á–∏—Ç—å", callback_data = "quiz_enable")],
        [InlineKeyboardButton(text = "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å", callback_data = "quiz_disable")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard = buttons)

    status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if current_status else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
    await message.answer(
        f"–°–µ–π—á–∞—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ <b>{status_text}</b>. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup = keyboard,
        parse_mode = "HTML"
    )


@router.callback_query(F.data.startswith("quiz_"))
async def quiz_toggle_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    action = callback.data.split("_")[1]

    if action == "enable":
        await execute_query(
            'UPDATE quiz_settings SET is_active = TRUE WHERE id = (SELECT MAX(id) FROM quiz_settings)')
        await callback.message.edit_text("‚úÖ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞!")
        await log_to_chat(callback.bot, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (ID: {user_id}) –≤–∫–ª—é—á–∏–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
    elif action == "disable":
        await execute_query(
            'UPDATE quiz_settings SET is_active = FALSE WHERE id = (SELECT MAX(id) FROM quiz_settings)')
        await callback.message.edit_text("‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞!")
        await log_to_chat(callback.bot, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (ID: {user_id}) –æ—Ç–∫–ª—é—á–∏–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")

    await callback.answer()


@router.message(F.text == "–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
async def export_results(message: types.Message, bot: Bot):
    user_id = message.from_user.id

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    buttons = [
        [InlineKeyboardButton(text = "üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data = "export_text")],
        [InlineKeyboardButton(text = "üìä –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data = "export_full")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard = buttons)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:",
        reply_markup = keyboard
    )


@router.callback_query(F.data.startswith("export_"))
async def export_callback(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id

    await callback.answer()
    export_type = callback.data.split("_")[1]

    if export_type == "text":
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É
        total_participants = await execute_select('SELECT COUNT(*) FROM quiz_participants')
        completed_participants = await execute_select(
            'SELECT COUNT(*) FROM quiz_participants WHERE is_completed = TRUE')

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        results = await execute_select_all('''
                SELECT correct_answers, COUNT(*) as count 
                FROM quiz_participants 
                WHERE is_completed = TRUE 
                GROUP BY correct_answers 
                ORDER BY correct_answers DESC
            ''')

        report = (
            f"üìä <b>–û—Ç—á–µ—Ç –ø–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ</b>\n\n"
            f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_participants}\n"
            f"–ó–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É: {completed_participants}\n\n"
            f"<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</b>\n"
        )

        for row in results:
            report += f"{row['correct_answers']} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {row['count']} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"

        await callback.message.edit_text(report, parse_mode = "HTML")

    elif export_type == "full":
        # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = await execute_select_all('''
                SELECT user_id, username, full_name, correct_answers, is_completed, is_timeout, 
                       started_at, completed_at
                FROM quiz_participants 
                ORDER BY correct_answers DESC, completed_at ASC
            ''')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_text(
            f"üìã <b>–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã ({len(participants)})</b>\n\n"
            f"–°–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏...",
            parse_mode = "HTML"
        )

        # –î–µ–ª–∏–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        chunk_size = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        for i in range(0, len(participants), chunk_size):
            chunk = participants[i:i + chunk_size]

            report = ""
            for idx, p in enumerate(chunk, start = i + 1):
                status = "‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª" if p['is_completed'] and not p['is_timeout'] else "‚è± –¢–∞–π–º-–∞—É—Ç" if p[
                    'is_timeout'] else "üîÑ –ê–∫—Ç–∏–≤–µ–Ω"
                completed = p['completed_at'].strftime("%d.%m.%Y %H:%M") if p['completed_at'] else "‚Äî"

                report += (
                    f"{idx}. <b>{p['full_name']}</b> (@{p['username'] or '‚Äî'})\n"
                    f"   ID: {p['user_id']}, –ë–∞–ª–ª—ã: {p['correct_answers']}\n"
                    f"   –°—Ç–∞—Ç—É—Å: {status}\n"
                    f"   –ù–∞—á–∞–ª: {p['started_at'].strftime('%d.%m.%Y %H:%M')}\n"
                    f"   –ó–∞–≤–µ—Ä—à–∏–ª: {completed}\n\n"
                )

            await bot.send_message(user_id, report, parse_mode = "HTML")
            await asyncio.sleep(0.3)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
