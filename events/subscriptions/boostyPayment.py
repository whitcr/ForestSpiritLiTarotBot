import logging
import datetime
from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder

from constants import SUBS_TYPE, DURATION_DISCOUNTS, PAID_MEANINGS_COST
from events.subscriptions.getInvoice import calculate_discounted_price, format_duration
from functions.subscription.sub import give_sub, give_meanings

LOGGER_CHAT = -4668410440
router = Router()


class PaymentScreenshot(StatesGroup):
    waiting_for_screenshot = State()
    payment_details = State()


@router.callback_query(F.data.startswith("boosty_payment_"))
async def boosty_payment(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await call.answer()

    parts = call.data.split("_")
    payment_type = parts[2]

    if payment_type == "meanings":
        meanings_count = int(parts[3])

        price_info = PAID_MEANINGS_COST[meanings_count]
        base_price = price_info['rubles']
        sale = price_info['sale']
        discounted_price = int(base_price * (100 - sale) / 100) if sale > 0 else base_price

        discount_text = f" (—Å–∫–∏–¥–∫–∞ {sale}%)" if sale > 0 else ""

        await state.update_data(payment_type = "meanings", meanings_count = meanings_count)

        boosty_keyboard = InlineKeyboardBuilder()
        boosty_keyboard.button(text = f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {discounted_price}‚ÇΩ", url = "https://boosty.to/forestspirit/donate")
        boosty_keyboard.button(text = "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω", callback_data = "send_payment_screenshot")
        boosty_keyboard.adjust(1)

        await bot.send_message(
            chat_id = call.message.chat.id,
            text = f"–î–ª—è –æ–ø–ª–∞—Ç—ã {meanings_count} —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫{discount_text} —á–µ—Ä–µ–∑ Boosty:\n\n"
                   f"1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å {discounted_price}‚ÇΩ'\n"
                   f"2. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ {discounted_price} —Ä—É–±–ª–µ–π\n"
                   f"3. –û–ø–ª–∞—Ç–∏—Ç–µ –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                   f"4. –ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω' –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                   f"\n\n–í —Ç–µ—á–µ–Ω–∏–∏ 6 —á–∞—Å–æ–≤ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞, –∞ —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.",
            reply_markup = boosty_keyboard.as_markup()
        )
    else:
        sub_type = int(payment_type)
        duration = int(parts[3]) if len(parts) > 3 else 1

        base_price = SUBS_TYPE[sub_type]['rubles']
        discounted_price = calculate_discounted_price(base_price, duration)

        name = SUBS_TYPE[sub_type]['name']
        duration_text = format_duration(duration)
        discount_text = f" (—Å–∫–∏–¥–∫–∞ {DURATION_DISCOUNTS[duration]}%)" if DURATION_DISCOUNTS[duration] > 0 else ""

        await state.update_data(payment_type = "subscription", sub_type = sub_type, duration = duration)

        boosty_keyboard = InlineKeyboardBuilder()
        boosty_keyboard.button(text = f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {discounted_price}‚ÇΩ", url = "https://boosty.to/forestspirit/donate")
        boosty_keyboard.button(text = "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω", callback_data = "send_payment_screenshot")
        boosty_keyboard.adjust(1)

        await bot.send_message(
            chat_id = call.message.chat.id,
            text = f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ {name} –Ω–∞ {duration_text}{discount_text} —á–µ—Ä–µ–∑ Boosty:\n\n"
                   f"1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å {discounted_price}‚ÇΩ'\n"
                   f"2. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ {discounted_price} —Ä—É–±–ª–µ–π\n"
                   f"3. –û–ø–ª–∞—Ç–∏—Ç–µ –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                   f"4. –ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω' –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                   f"\n\n–í —Ç–µ—á–µ–Ω–∏–∏ 6 —á–∞—Å–æ–≤ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞, –∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
            reply_markup = boosty_keyboard.as_markup()
        )


@router.callback_query(F.data == "send_payment_screenshot")
async def ask_for_screenshot(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã.")
    await state.set_state(PaymentScreenshot.waiting_for_screenshot)


@router.message(PaymentScreenshot.waiting_for_screenshot, F.photo)
async def process_screenshot(message: types.Message, bot: Bot, state: FSMContext):
    try:
        user_id = message.from_user.id
        username = f"@{message.from_user.username}" if message.from_user.username else f"[ID: {user_id}](tg://user?id={user_id})"
        photo_id = message.photo[-1].file_id

        state_data = await state.get_data()
        payment_type = state_data.get("payment_type", "subscription")

        keyboard = InlineKeyboardBuilder()
        current_time = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")

        if payment_type == "subscription":
            sub_type = state_data.get("sub_type", 1)
            duration = state_data.get("duration", 1)

            requested_sub_name = SUBS_TYPE[sub_type]['name']
            duration_text = format_duration(duration)
            discount_text = f" (—Å–∫–∏–¥–∫–∞ {DURATION_DISCOUNTS[duration]}%)" if DURATION_DISCOUNTS[duration] > 0 else ""

            base_price = SUBS_TYPE[sub_type]['rubles']
            discounted_price = calculate_discounted_price(base_price, duration)

            keyboard.button(
                text = "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É",
                callback_data = f"approve_sub:{sub_type}:{duration}:{user_id}"
            )
            keyboard.button(
                text = "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data = f"reject_payment:{user_id}"
            )
            keyboard.adjust(1)

            caption = (
                f"üì© <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É</b>\n"
                f"‚è± –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {current_time}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                f"üÜî ID: `{user_id}`\n\n"
                f"üìä –ü–æ–¥–ø–∏—Å–∫–∞: <b>{requested_sub_name}</b>\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{duration_text}</b>{discount_text}\n"
                f"üí∞ –°—É–º–º–∞: <b>{discounted_price}‚ÇΩ</b>\n\n"
                f"–°—Ç–∞—Ç—É—Å: ‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
            )

        else:  # payment_type == "meanings"
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫
            meanings_count = state_data.get("meanings_count", 10)

            price_info = PAID_MEANINGS_COST[meanings_count]
            base_price = price_info['rubles']
            sale = price_info['sale']
            discounted_price = int(base_price * (100 - sale) / 100) if sale > 0 else base_price
            discount_text = f" (—Å–∫–∏–¥–∫–∞ {sale}%)" if sale > 0 else ""

            keyboard.button(
                text = "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É",
                callback_data = f"approve_meanings:{meanings_count}:{user_id}"
            )
            keyboard.button(
                text = "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data = f"reject_payment:{user_id}"
            )
            keyboard.adjust(1)

            caption = (
                f"üì© <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫</b>\n"
                f"‚è± –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {current_time}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                f"üÜî ID: `{user_id}`\n\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{meanings_count} —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫</b>{discount_text}\n"
                f"üí∞ –°—É–º–º–∞: <b>{discounted_price}‚ÇΩ</b>\n\n"
                f"–°—Ç–∞—Ç—É—Å: ‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
            )

        await bot.send_photo(
            chat_id = LOGGER_CHAT,
            photo = photo_id,
            caption = caption,
            reply_markup = keyboard.as_markup()
        )

        await message.answer("‚úÖ –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        await state.clear()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(PaymentScreenshot.waiting_for_screenshot)
async def wrong_screenshot_type(message: types.Message, state: FSMContext):
    await message.answer(
        "‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω' –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.clear()


@router.callback_query(F.data.startswith("approve_sub:"))
async def approve_subscription(call: types.CallbackQuery, bot: Bot):
    try:
        await call.answer()

        _, sub_type, duration, user_id = call.data.split(":")
        sub_type = int(sub_type)
        duration = int(duration)
        user_id = int(user_id)

        sub_name = SUBS_TYPE[sub_type]['name']
        duration_text = format_duration(duration)

        expiry_date = await give_sub(user_id, duration * 30, sub_type)

        approval_time = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")

        await bot.send_message(
            user_id,
            f"üéâ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
            f"–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: <b>{sub_name}</b> –Ω–∞ {duration_text}!\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {expiry_date}.\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! ‚ù§Ô∏è"
        )

        original_caption = call.message.caption
        caption_without_status = original_caption.split("\n\n–°—Ç–∞—Ç—É—Å:")[0]

        admin_info = f"{call.from_user.full_name} ({call.from_user.id})" if call.from_user else "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

        new_caption = (
            f"{caption_without_status}\n\n"
            f"–°—Ç–∞—Ç—É—Å: ‚úÖ <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û</b>\n"
            f"–í—Ä–µ–º—è: {approval_time}\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_info}\n"
            f"–í—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {sub_name} –Ω–∞ {duration_text}\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiry_date}"
        )

        await call.message.edit_caption(caption = new_caption, reply_markup = None)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await call.message.answer(f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")


@router.callback_query(F.data.startswith("approve_meanings:"))
async def approve_meanings(call: types.CallbackQuery, bot: Bot):
    try:
        await call.answer()

        _, meanings_count, user_id = call.data.split(":")
        meanings_count = int(meanings_count)
        user_id = int(user_id)

        await give_meanings(user_id, meanings_count)

        approval_time = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")

        await bot.send_message(
            user_id,
            f"üéâ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
            f"–ù–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ: <b>{meanings_count} —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫</b>!\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! ‚ù§Ô∏è"
        )

        original_caption = call.message.caption
        caption_without_status = original_caption.split("\n\n–°—Ç–∞—Ç—É—Å:")[0]

        admin_info = f"{call.from_user.full_name} ({call.from_user.id})" if call.from_user else "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

        new_caption = (
            f"{caption_without_status}\n\n"
            f"–°—Ç–∞—Ç—É—Å: ‚úÖ <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û</b>\n"
            f"–í—Ä–µ–º—è: {approval_time}\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_info}\n"
            f"–í—ã–¥–∞–Ω–æ: {meanings_count} —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫"
        )

        await call.message.edit_caption(caption = new_caption, reply_markup = None)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫: {e}")
        await call.message.answer(f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫: {e}")


@router.callback_query(F.data.startswith("reject_payment:"))
async def reject_payment(call: types.CallbackQuery, bot: Bot):
    try:
        await call.answer()

        _, user_id = call.data.split(":")
        user_id = int(user_id)

        reject_time = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")

        await bot.send_message(
            user_id,
            "üö´ –í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "- –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞\n"
            "- –ù–µ—á–∏—Ç–∞–µ–º—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n"
            "- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )

        original_caption = call.message.caption
        caption_without_status = original_caption.split("\n\n–°—Ç–∞—Ç—É—Å:")[0]

        admin_info = f"{call.from_user.full_name} ({call.from_user.id})" if call.from_user else "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

        new_caption = (
            f"{caption_without_status}\n\n"
            f"–°—Ç–∞—Ç—É—Å: ‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–û</b>\n"
            f"–í—Ä–µ–º—è: {reject_time}\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_info}"
        )

        await call.message.edit_caption(caption = new_caption, reply_markup = None)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã: {e}")
        await call.message.answer(f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
