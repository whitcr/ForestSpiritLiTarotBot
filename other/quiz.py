from database import execute_select, execute_query
from main import cursor, dp, db, bot
from aiogram import types
from aiogram.dispatcher import FSMContext
import random
import asyncio
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

start_button = InlineKeyboardButton(text = "–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data = "start_quiz")
start_quiz_keyboard = InlineKeyboardMarkup(resize_keyboard = True).add(start_button)


@dp.message_handler(lambda message: message.text.lower().startswith("–≤–∏–∫"))
async def start(message: types.Message):
    user = f"<a href = 'tg://user?id={message.from_user.id}'>{message.from_user.full_name}</a>"
    await message.answer(f'<b>–ü—Ä–∏–≤–µ—Ç {user}, —Ä–∞–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –Ω–∞ –º–æ–µ–π –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ!</b> '
                         f'\n\n–¢–∞–∫ –∫–∞–∫ —É –º–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –º–∞—Ä–∞—Ñ–æ–Ω —Å–∫–∏–¥–æ–∫ –∏ –ø–æ–¥–∞—Ä–∫–æ–≤ üòª\n'
                         f'–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏ —á–µ–º –±–æ–ª—å—à–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ‚Äî —Ç–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –ø—Ä–∏–∑üôÄ\n\n'
                         f'<b>–ö–æ–≥–¥–∞ –¥–æ–π–¥–µ—à—å –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî —Ç–≤–æ–π –ø—Ä–∏–∑ —É–∂–µ –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å —Ç–µ–±—è </b>üòé')
    await message.answer(
        f'<b>–£—Å–ª–æ–≤–∏—è –í–∏–∫—Ç–æ—Ä–∏–Ω—ã:</b>'
        f'\n\n–í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ù–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–æ–¥–∏—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç. –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ–ø—É—â–µ–Ω–æ ‚Äî –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è :)'
        f'\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ! –í–∏–∫—Ç–æ—Ä–∏–Ω—É –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑! –ü–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ –Ω–∞—á–∞–ª–∏ ‚Äî –ø—Ä–∏–¥–µ—Ç—Å—è –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø—Ä–∏–∑ :)</b>'
        f'\n\n–ù—É —á—Ç–æ, –ø–æ–≥–Ω–∞–ª–∏?', reply_markup = start_quiz_keyboard)


from contextlib import suppress


async def timeout(question, user_id, sleep_time: int = 0):
    try:
        await asyncio.sleep(sleep_time)

        num = await execute_select("select question from quiz_holion where user_id = {}", (user_id,))

        timeout = await execute_select("select timeout from quiz_holion where user_id = {}", (user_id,))

        if timeout == 1 and question == num:
            await bot.send_message(user_id,
                                   f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏ –≤—ã–±—ã–≤–∞–µ—à—å –∏–∑ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. '
                                   f'–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ —Ç–µ–±—è —Ç—É—Ç —É–≤–∏–¥–µ—Ç—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç—ã —Å–º–æ–∂–µ—à—å –¥–æ–π—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞, –∞ –ø–æ–∫–∞ —á—Ç–æ ‚Äî –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á‚ô•Ô∏è')
        else:
            pass
    except:
        pass


# @dp.message_handler(lambda message: message.text.lower() == "—Ç–µ—Å—Ç")
# async def get_test_quiz(message: types.Message, state="*"):

@dp.callback_query_handler(lambda call: call.data == 'start_quiz')
async def get_test_quiz(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    if call.message.chat.type == 'private':
        try:
            try:
                check = await execute_select("select user_id from quiz_holion where user_id = {}",
                                             (call.message.chat.id,))

            except:
                await execute_query("insert into quiz_holion(user_id, question) values ({},{})",
                                    (call.message.chat.id, 1))

            try:
                check = await execute_select("select joint from quiz_holion where user_id = {}",
                                             (call.message.chat.id,))

                if check == None:
                    check = 2
            except:
                check = 2

            if check == 90:
                await bot.send_message(call.message.chat.id,
                                       '–ê—Ö —Ç—ã —Ö–∏—Ç—Ä–∞—è –∑–º–µ–π–∫–∞! –í—Å—ë—ë—ë, –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è üòú ')
            else:
                await test_quiz(call.message.chat.id, state)
                await execute_query("UPDATE quiz_holion SET joint = {} where user_id = {};", (0, call.message.chat.id))

        except:
            await bot.send_message(call.message.chat.id,
                                   "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    else:
        await bot.send_message(call.message.chat.id,
                               "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –õ–∏—á–Ω—ã—Ö –°–æ–æ–±—â–µ–Ω–∏—è—Ö.")


async def test_quiz(user_id, state: FSMContext):
    try:
        await execute_query("UPDATE quiz_holion SET timeout = {} where user_id = {};", (1, user_id))

        num = await execute_select("select question from quiz_holion where user_id = {}", (user_id,))

        new_num = num + 1

        question = await execute_select("select question from quiz_holion_text where num = {}", (num,))
        correct_answer = await execute_select("select option_0 from quiz_holion_text where num = {}", (num,))
        option_1 = await execute_select("select option_1 from quiz_holion_text where num = {}", (num,))
        option_2 = await execute_select("select option_2 from quiz_holion_text where num = {}", (num,))
        option_3 = await execute_select("select option_3 from quiz_holion_text where num = {}", (num,))

        # ignore = [num]
        # ran = [ind for ind in range(7) if ind not in ignore]

        answers = []
        answers.append(correct_answer)
        answers.append(option_1)
        answers.append(option_2)
        answers.append(option_3)
        random.shuffle(answers)

        # false = random.sample(ran, 4)

        # for el in false:
        #     cursor.execute("select practice.handlers from practice where number = {}",(el))
        #     false_answer = cursor.fetchone()[0]
        #     answers.append(false_answer)

        c = await check_correct_answer(answers, correct_answer)

        # try:
        #     cursor.execute("select image from quiz_holion_text where number = {}",(num))
        #     image = cursor.fetchone()[0]
        #     await bot.send_photo(user_id, photo=image)
        # except:
        #     pass

        # global this_quiz
        poll = await bot.send_poll(user_id, f'{question}',
                                   [f'{answers[0]}', f'{answers[1]}', f'{answers[2]}', f'{answers[3]}'],
                                   type = 'handlers', correct_option_id = c, is_anonymous = False, open_period = 300)

        await state.update_data(poll = poll)
        asyncio.create_task(timeout(num, user_id, 320))
    except:
        pass


async def check_correct_answer(answers, correct_answer):
    x = 0
    for el in answers:
        x = x + 1
        if el == correct_answer:
            c = x - 1
            return c


@dp.poll_answer_handler()
async def handle_poll_answer(quiz_answer: types.PollAnswer):
    state = dp.current_state(chat = quiz_answer.user.id, user = quiz_answer.user.id)
    # poll = state.get_state().poll
    # poll = state.get_state().poll
    poll = await state.get_data()
    poll = poll.get("poll")
    poll = poll.poll

    await execute_query("UPDATE quiz_holion SET timeout = {} where user_id = {};", (0, quiz_answer.user.id))

    num = await execute_select("select question from quiz_holion where user_id = {}", (quiz_answer.user.id,))

    new_num = num + 1
    # poll = await state.get_data()["poll"]
    if poll.correct_option_id == quiz_answer.option_ids[0]:
        text = await execute_select("select r_ans from quiz_holion_text where num = {}", (num,))

        await bot.send_message(quiz_answer.user.id, text = f'{text}')

        try:
            counter = await execute_select("select counter from quiz_holion where user_id = {}", (quiz_answer.user.id,))

            counter = 1 + counter
        except:
            counter = 1

        await execute_query("UPDATE quiz_holion SET counter = {} where user_id = {};", (counter, quiz_answer.user.id,))

    else:
        text = await execute_select("select w_ans from quiz_holion_text where num = {}", (num,))

        await bot.send_message(quiz_answer.user.id, text = f'{text}')

        try:
            counter = await execute_select("select counter from quiz_holion where user_id = {}", (quiz_answer.user.id,))

        except:
            counter = 1

    await execute_query(
        "UPDATE quiz_holion SET question = {} where user_id = {};", (new_num, quiz_answer.user.id))

    if new_num != 11:
        await test_quiz(quiz_answer.user.id, state)
    else:
        if counter <= 5:
            await bot.send_message(quiz_answer.user.id,
                                   f'<b> –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: </b>'
                                   f'\n\n {counter} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!'
                                   f'<b> –¢–≤–æ–π –ø—Ä–∏–∑: </b>'
                                   f'\n\n üôÄ –°–∫–∏–¥–∫–∞ 50% –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –Ω–µ–≥–∞—Ç–∏–≤–∞ –∏–ª–∏ —Ä–æ–¥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤'
                                   f'\n\n<b>–Ø —Ä–∞–¥–∞, —á—Ç–æ —Ç—ã —Å–æ –º–Ω–æ–π </b>‚ô•Ô∏è')
        if counter == 6 or counter == 7 or counter == 8:
            await bot.send_message(quiz_answer.user.id,
                                   f'<b> –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: </b>'
                                   f'\n\n {counter} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!'
                                   f'<b> –¢–≤–æ–π –ø—Ä–∏–∑: </b>'
                                   f'\n\nüôÄ –°–∫–∏–¥–∫–∞ 50% –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –Ω–µ–≥–∞—Ç–∏–≤–∞ –∏–ª–∏ —Ä–æ–¥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤'
                                   f'\nüôÄ –°–∫–∏–¥–∫–∞ 60% –Ω–∞ –ª—é–±—É—é –ª–µ–∫—Ü–∏—é –∏–∑ –ø—Ä–∞–π—Å–∞'
                                   f'\n\n<b>–Ø —Ä–∞–¥–∞, —á—Ç–æ —Ç—ã —Å–æ –º–Ω–æ–π </b>‚ô•Ô∏è')
        if counter == 9:
            await bot.send_message(quiz_answer.user.id,
                                   f'<b> –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: </b>'
                                   f'\n\n {counter} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!'
                                   f'<b> –¢–≤–æ–π –ø—Ä–∏–∑: </b>'
                                   f'\n\nüôÄ –°–∫–∏–¥–∫–∞ 50% –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –Ω–µ–≥–∞—Ç–∏–≤–∞ –∏–ª–∏ —Ä–æ–¥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤'
                                   f'\nüôÄ –°–∫–∏–¥–∫–∞ 60% –Ω–∞ –ª—é–±—É—é –ª–µ–∫—Ü–∏—é –∏–∑ –ø—Ä–∞–π—Å–∞'
                                   f'\nüôÄ –°–∫–∏–¥–∫–∞ 50% –Ω–∞ —Ä–∏—Ç—É–∞–ª —á–∏—Å—Ç–∫–∏'
                                   f'\n\n<b>–Ø —Ä–∞–¥–∞, —á—Ç–æ —Ç—ã —Å–æ –º–Ω–æ–π </b>‚ô•Ô∏è')
        if counter == 10:
            await bot.send_message(quiz_answer.user.id,
                                   f'<b> –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: </b>'
                                   f'\n\n {counter} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!'
                                   f'<b> –¢–≤–æ–π –ø—Ä–∏–∑: </b>'
                                   f'\n\nüôÄ –°–∫–∏–¥–∫–∞ 50% –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –Ω–µ–≥–∞—Ç–∏–≤–∞ –∏–ª–∏ —Ä–æ–¥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤'
                                   f'\nüôÄ –°–∫–∏–¥–∫–∞ 60% –Ω–∞ –ª—é–±—É—é –ª–µ–∫—Ü–∏—é –∏–∑ –ø—Ä–∞–π—Å–∞'
                                   f'\nüôÄ –°–∫–∏–¥–∫–∞ 50% –Ω–∞ —Ä–∏—Ç—É–∞–ª —á–∏—Å—Ç–∫–∏'
                                   f'\nüôÄ –õ–µ–∫—Ü–∏—è –ø–æ —á–∞–∫—Ä–∞–º –≤ –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –º–µ—Å'
                                   f'\n\n<b>–Ø —Ä–∞–¥–∞, —á—Ç–æ —Ç—ã —Å–æ –º–Ω–æ–π </b>‚ô•Ô∏è')
    # cursor.execute("UPDATE quiz_holion SET joint = {} where user_id = {};",(1, quiz_answer.user.id))
    # db.commit()

# from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
#
# image_block_button = InlineKeyboardButton(text="–û–ø—Ä–æ—Å —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π", callback_data="image_block")
# text_block_button = InlineKeyboardButton(text="–û–ø—Ä–æ—Å", callback_data="text_block")
# create_keyboard =  InlineKeyboardMarkup(resize_keyboard=True).add(text_block_button, image_block_button)

# @dp.message_handler(lambda message: message.text.lower() == "—Å–æ–∑–¥–∞—Ç—å")
# async def create_test_quiz(message: types.Message, state="*"):
#     await bot.send_message(message.from_user.id, '–ö–∞–∫–æ–π –±–ª–æ–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?', reply_markup=create_keyboard)
#
# class Create(StatesGroup):
#     question = State()
#     answer = State()
#     option_02 = State()
#     option_03 = State()
#     option_04 = State()
#
#
# @dp.callback_query_handler(lambda call: call.data == 'text_block')
# async def image_block_cb(call: types.CallbackQuery):
#     await call.answer()
#     await call.message.answer(
#         f"–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
#     await Create.question.set()
#
# @dp.message_handler(state=Create.question)
# async def get_question(message: types.Message, state: FSMContext):
#     await state.update_data(question=message.text)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç")
#     await Create.answer.set()
#
# @dp.message_handler(state=Create.answer)
# async def get_question(message: types.Message, state: FSMContext):
#     await state.update_data(answer=message.text)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç")
#     await Create.option_02.set()
#
# @dp.message_handler(state=Create.option_02)
# async def get_question(message: types.Message, state: FSMContext):
#     await state.update_data(option_02=message.text)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç")
#     await Create.option_03.set()
#
# @dp.message_handler(state=Create.option_03)
# async def get_question(message: types.Message, state: FSMContext):
#     await state.update_data(option_03=message.text)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç")
#     await Create.option_04.set()
#
# @dp.message_handler(state=Create.option_04)
# async def get_question(message: types.Message, state: FSMContext):
#     await state.update_data(option_04=message.text)
#     data = await state.get_data()
#     question = str(data['question'])
#     answer = str(data['answer'])
#     option_02 = str(data['option_02'])
#     option_03 = str(data['option_03'])
#     option_04 = str(data['option_04'])
