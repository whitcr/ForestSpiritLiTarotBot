from datetime import timedelta, datetime

from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types, Router

from constants import DECK_MAP, SUBS_TYPE, COUPONS
from database import execute_query, execute_select_all, execute_select
from filters.baseFilters import IsAdmin
from aiogram import F, Bot

from functions.subscription.sub import give_sub
from handlers.commands.user import get_user_profile

router = Router()

logger_chat = -4668410440


class AdminStates(StatesGroup):
    waiting_meanings_amount = State()
    waiting_coupon_amount = State()
    waiting_sub_days = State()
    waiting_referrals_amount = State()
    waiting_paid_spreads_amount = State()


@router.message(IsAdmin(), F.text.lower().startswith("!–ø"))
async def admin_view_profile(message: types.Message, bot: Bot):
    args = message.text.split()

    user_id = None

    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
    elif len(args) > 1:
        if args[1].isdigit():
            user_id = int(args[1])
        else:
            username = args[1].lstrip('@')
            user_id_result = await execute_select("SELECT user_id FROM users WHERE username = $1", (username,))
            if user_id_result and user_id_result:
                user_id = user_id_result
            else:
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
    else:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    await show_user_profile(message, user_id)


async def show_user_profile(message, user_id):
    user_profile = await get_user_profile(user_id)

    bonuses = await execute_select_all("SELECT paid_spreads, referrals_paid, referrals FROM users WHERE user_id = $1",
                                       (user_id,))

    paid_spread, referrals_paid, referrals = bonuses[0]

    if not user_profile or not user_profile[0]:
        await message.reply(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    profile_data = user_profile[0]

    deck_type = profile_data[0]
    subscription = profile_data[1]
    subscription_date = profile_data[2]
    day_follow = {
        "moon_follow": profile_data[3],
        "day_card_follow": profile_data[4],
        "week_card_follow": profile_data[5],
        "month_card_follow": profile_data[6],
    }
    interactions = profile_data[7]
    booster = profile_data[8]
    referrals_ids = profile_data[9]
    paid_meanings = profile_data[10]
    coupon_gold = profile_data[11]
    coupon_silver = profile_data[12]
    coupon_iron = profile_data[13]

    coupons = (f"{coupon_gold} –∑–æ–ª–æ—Ç{'—ã—Ö' if coupon_gold != 1 else '–æ–π'}, "
               f"{coupon_silver} —Å–µ—Ä–µ–±—Ä—è–Ω{'—ã—Ö' if coupon_silver != 1 else '—ã–π'}, "
               f"{coupon_iron} –∂–µ–ª–µ–∑–Ω{'—ã—Ö' if coupon_iron != 1 else '—ã–π'}")

    deck_type = DECK_MAP[deck_type] if deck_type else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    subscription = SUBS_TYPE[subscription]['name'] if subscription else "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏"

    subscription_date = subscription_date if subscription_date else "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏"
    interactions = interactions if interactions else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    booster = '–î–∞' if booster else '–ù–µ—Ç'

    paid_meanings = paid_meanings if paid_meanings else "0"

    moon_follow = "–ï—Å—Ç—å" if day_follow['moon_follow'] else '–ù–µ—Ç'
    day_card_follow = "–ï—Å—Ç—å" if day_follow['day_card_follow'] else '–ù–µ—Ç'
    week_card_follow = "–ï—Å—Ç—å" if day_follow['week_card_follow'] else '–ù–µ—Ç'
    month_card_follow = "–ï—Å—Ç—å" if day_follow['month_card_follow'] else '–ù–µ—Ç'

    user_link = f'<a href="tg://user?id={user_id}">{user_id}</a>'

    profile_text = (
        f"üìã <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> (ID: {user_link})\n\n"
        f"<b>–ö–æ–ª–æ–¥–∞:</b> {deck_type}\n"
        f"<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription}\n"
        f"<b>–ö–æ–Ω–µ—Ü –ø–æ–¥–ø–∏—Å–∫–∏:</b> {subscription_date}\n"
        f"<b>–ö–æ–ª-–≤–æ —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫ –æ—Ç –õ–∏:</b> {paid_meanings}\n"
        f"<b>–†–∞—Å—Å—ã–ª–∫–∏:</b>\n"
        f"    üåô –õ—É–Ω–∞: {moon_follow}\n"
        f"    üåû –†–∞—Å–∫–ª–∞–¥ –¥–Ω—è: {day_card_follow}\n"
        f"    üìÖ –†–∞—Å–∫–ª–∞–¥ –Ω–µ–¥–µ–ª–∏: {week_card_follow}\n"
        f"    üìÜ –†–∞—Å–∫–ª–∞–¥ –º–µ—Å—è—Ü–∞: {month_card_follow}\n"
        f"<b>–ö—É–ø–æ–Ω—ã:</b> {coupons}\n"
        f"<b>–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:</b> {interactions}\n"
        f"<b>–ë—É—Å—Ç:</b> {booster}\n"
        f"<b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞—Å–∫–ª–∞–¥—ã:</b> {referrals_paid}\n"
        f"<b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –≤ –õ–∏:</b> {len(referrals)}\n"
        f"<b>–ü–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤:</b> {paid_spread}\n"
    )

    admin_profile_keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text = "‚ûï –¢—Ä–∞–∫—Ç–æ–≤–∫–∏", callback_data = f"admin_meanings_{user_id}"),
                InlineKeyboardButton(text = "üí∞ –ö—É–ø–æ–Ω—ã", callback_data = f"admin_coupons_{user_id}")
            ],
            [
                InlineKeyboardButton(text = "üîÑ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data = f"admin_subscription_{user_id}"),
                InlineKeyboardButton(text = "üë• –î—Ä—É–∑—å—è", callback_data = f"admin_referrals_{user_id}")
            ],
            [
                InlineKeyboardButton(text = "üëÅ –ü–ª–∞—Ç–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã", callback_data = f"admin_paidspreads_{user_id}")
            ]
        ]
    )

    await message.answer(profile_text, reply_markup = admin_profile_keyboard)


@router.callback_query(lambda c: c.data.startswith("admin_meanings_"))
async def admin_meanings_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[-1])
    await callback_query.answer()
    meanings_keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text = "+1", callback_data = f"add_meanings_{user_id}_1"),
                InlineKeyboardButton(text = "+3", callback_data = f"add_meanings_{user_id}_3"),
                InlineKeyboardButton(text = "+5", callback_data = f"add_meanings_{user_id}_5")
            ],
            [
                InlineKeyboardButton(text = "+10", callback_data = f"add_meanings_{user_id}_10"),
                InlineKeyboardButton(text = "+20", callback_data = f"add_meanings_{user_id}_20"),
                InlineKeyboardButton(text = "+50", callback_data = f"add_meanings_{user_id}_50")
            ],
            [
                InlineKeyboardButton(text = "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data = f"manual_meanings_{user_id}")
            ],
            [
                InlineKeyboardButton(text = "üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data = f"back_to_profile_{user_id}")
            ]
        ]
    )

    await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):",
        reply_markup = meanings_keyboard
    )


@router.callback_query(lambda c: c.data.startswith("admin_coupons_"))
async def admin_coupons_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[-1])
    await callback_query.answer()
    coupons_keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text = "–ó–æ–ª–æ—Ç—ã–µ", callback_data = f"coupon_type_{user_id}_gold")
            ],
            [
                InlineKeyboardButton(text = "–°–µ—Ä–µ–±—Ä—è–Ω—ã–µ", callback_data = f"coupon_type_{user_id}_silver")
            ],
            [
                InlineKeyboardButton(text = "–ñ–µ–ª–µ–∑–Ω—ã–µ", callback_data = f"coupon_type_{user_id}_iron")
            ],
            [
                InlineKeyboardButton(text = "üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data = f"back_to_profile_{user_id}")
            ]
        ]
    )

    await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É–ø–æ–Ω–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):",
        reply_markup = coupons_keyboard
    )


@router.callback_query(lambda c: c.data.startswith("coupon_type_"))
async def coupon_type_callback(callback_query: types.CallbackQuery):
    parts = callback_query.data.split('_')
    user_id = int(parts[2])
    coupon_type = parts[3]
    await callback_query.answer()
    coupon_name = COUPONS[coupon_type]["fname"]

    coupon_amount_keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text = "+1", callback_data = f"add_coupon_{user_id}_{coupon_type}_1"),
                InlineKeyboardButton(text = "+3", callback_data = f"add_coupon_{user_id}_{coupon_type}_3"),
                InlineKeyboardButton(text = "+5", callback_data = f"add_coupon_{user_id}_{coupon_type}_5")
            ],
            [
                InlineKeyboardButton(text = "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data = f"manual_coupon_{user_id}_{coupon_type}")
            ],
            [
                InlineKeyboardButton(text = "üîô –ù–∞–∑–∞–¥ –∫ –∫—É–ø–æ–Ω–∞–º", callback_data = f"admin_coupons_{user_id}")
            ]
        ]
    )

    await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {coupon_name} –∫—É–ø–æ–Ω–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):",
        reply_markup = coupon_amount_keyboard
    )


@router.callback_query(lambda c: c.data.startswith("admin_subscription_"))
async def admin_subscription_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[-1])
    await callback_query.answer()
    subscription_keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text = "–®—É—Ç", callback_data = f"sub_type_{user_id}_1")
            ],
            [
                InlineKeyboardButton(text = "–ú–∞–≥", callback_data = f"sub_type_{user_id}_2")
            ],
            [
                InlineKeyboardButton(text = "–ñ—Ä–∏—Ü–∞", callback_data = f"sub_type_{user_id}_3")
            ],
            [
                InlineKeyboardButton(text = "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data = f"cancel_subscription_{user_id}")
            ],
            [
                InlineKeyboardButton(text = "üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data = f"back_to_profile_{user_id}")
            ]
        ]
    )

    await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}):",
        reply_markup = subscription_keyboard
    )


@router.callback_query(lambda c: c.data.startswith("sub_type_"))
async def sub_type_callback(callback_query: types.CallbackQuery):
    parts = callback_query.data.split('_')
    user_id = int(parts[2])
    sub_type = int(parts[3])
    await callback_query.answer()

    sub_name = SUBS_TYPE[sub_type]['name']

    sub_duration_keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text = "7 –¥–Ω–µ–π", callback_data = f"add_sub_{user_id}_{sub_type}_7"),
                InlineKeyboardButton(text = "14 –¥–Ω–µ–π", callback_data = f"add_sub_{user_id}_{sub_type}_14")
            ],
            [
                InlineKeyboardButton(text = "30 –¥–Ω–µ–π", callback_data = f"add_sub_{user_id}_{sub_type}_30"),
                InlineKeyboardButton(text = "90 –¥–Ω–µ–π", callback_data = f"add_sub_{user_id}_{sub_type}_90")
            ],
            [
                InlineKeyboardButton(text = "180 –¥–Ω–µ–π", callback_data = f"add_sub_{user_id}_{sub_type}_180"),
                InlineKeyboardButton(text = "365 –¥–Ω–µ–π", callback_data = f"add_sub_{user_id}_{sub_type}_365")
            ],
            [
                InlineKeyboardButton(text = "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data = f"manual_sub_{user_id}_{sub_type}")
            ],
            [
                InlineKeyboardButton(text = "üîô –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º", callback_data = f"admin_subscription_{user_id}")
            ]
        ]
    )

    await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ {sub_name} –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}):",
        reply_markup = sub_duration_keyboard
    )


@router.callback_query(lambda c: c.data.startswith("admin_referrals_"))
async def admin_referrals_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[-1])
    await callback_query.answer()
    referrals_keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text = "+1", callback_data = f"add_referrals_{user_id}_1"),
                InlineKeyboardButton(text = "+3", callback_data = f"add_referrals_{user_id}_3"),
                InlineKeyboardButton(text = "+5", callback_data = f"add_referrals_{user_id}_5")
            ],
            [
                InlineKeyboardButton(text = "+10", callback_data = f"add_referrals_{user_id}_10"),
                InlineKeyboardButton(text = "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data = f"manual_referrals_{user_id}")
            ],
            [
                InlineKeyboardButton(text = "üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data = f"back_to_profile_{user_id}")
            ]
        ]
    )

    await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π (—Ä–µ—Ñ–µ—Ä—Ä–∞–ª–æ–≤) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):",
        reply_markup = referrals_keyboard
    )


@router.callback_query(lambda c: c.data.startswith("admin_paidspreads_"))
async def admin_referrals_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[-1])
    await callback_query.answer()
    referrals_keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text = "+1", callback_data = f"add_paidspreads_{user_id}_1"),
                InlineKeyboardButton(text = "+2", callback_data = f"add_paidspreads_{user_id}_2"),
                InlineKeyboardButton(text = "+3", callback_data = f"add_paidspreads_{user_id}_3")
            ],
            [
                InlineKeyboardButton(text = "+4", callback_data = f"add_paidspreads_{user_id}_4"),
                InlineKeyboardButton(text = "+5", callback_data = f"add_paidspreads_{user_id}_5"),
                InlineKeyboardButton(text = "+6", callback_data = f"add_paidspreads_{user_id}_6")
            ],
            [
                InlineKeyboardButton(text = "+10", callback_data = f"add_paidspreads_{user_id}_10"),
                InlineKeyboardButton(text = "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data = f"add_paidspreads_{user_id}")
            ],
            [
                InlineKeyboardButton(text = "üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data = f"back_to_profile_{user_id}")
            ]
        ]
    )

    await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):",
        reply_markup = referrals_keyboard
    )


@router.callback_query(lambda c: c.data.startswith("add_meanings_"))
async def add_meanings_callback(callback_query: types.CallbackQuery):
    parts = callback_query.data.split('_')
    user_id = int(parts[2])
    amount = int(parts[3])

    await execute_query(
        "UPDATE users SET paid_meanings = paid_meanings + $1 WHERE user_id = $2",
        (amount, user_id)
    )
    await callback_query.message.edit_text(
        text = f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}!", reply_markup = None)
    await show_user_profile(callback_query.message, user_id)


@router.callback_query(StateFilter(None), lambda c: c.data.startswith("manual_meanings_"))
async def manual_meanings_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split('_')[-1])
    await callback_query.answer()
    await state.set_state("waiting_meanings_amount")
    await state.update_data(user_id = user_id)

    await callback_query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
    )


@router.callback_query(lambda c: c.data.startswith("add_coupon_"))
async def add_coupon_callback(callback_query: types.CallbackQuery, bot: Bot):
    parts = callback_query.data.split('_')
    user_id = int(parts[2])
    coupon_type = parts[3]
    amount = int(parts[4])
    await callback_query.answer()
    await bot.send_message(logger_chat, f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} {coupon_type} –∫—É–ø–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}!")

    column = COUPONS[coupon_type]["field"]

    await execute_query(
        f"UPDATE users SET {column} = {column} + $1 WHERE user_id = $2",
        (amount, user_id)
    )
    await callback_query.message.edit_text(text = f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} {coupon_type} –∫—É–ø–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}!",
                                           reply_markup = None)
    await show_user_profile(callback_query.message, user_id)


@router.callback_query(StateFilter(None), lambda c: c.data.startswith("manual_coupon_"))
async def manual_coupon_callback(callback_query: types.CallbackQuery, state: FSMContext):
    parts = callback_query.data.split('_')
    user_id = int(parts[2])
    coupon_type = parts[3]
    await callback_query.answer()
    await state.set_state("waiting_coupon_amount")
    await state.update_data(user_id = user_id, coupon_type = coupon_type)

    coupon_name = COUPONS[coupon_type]["name"]

    await callback_query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {coupon_name} –∫—É–ø–æ–Ω–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
    )


@router.callback_query(lambda c: c.data.startswith("add_sub_"))
async def add_subscription_callback(callback_query: types.CallbackQuery, bot: Bot):
    parts = callback_query.data.split('_')
    user_id = int(parts[2])
    sub_type = int(parts[3])
    days = int(parts[4])
    await callback_query.answer()

    date = await give_sub(user_id, days, sub_type)
    await bot.send_message(logger_chat,
                           f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {sub_type} –Ω–∞ {days} –¥–Ω–µ–π –¥–ª—è {user_id}! –ó–∞–∫–æ–Ω—á–∏—Ç—Å—è {date}")
    await callback_query.message.edit_text(
        text = f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {sub_type} –Ω–∞ {days} –¥–Ω–µ–π –¥–ª—è {user_id}! –ó–∞–∫–æ–Ω—á–∏—Ç—Å—è {date}", reply_markup = None)
    await show_user_profile(callback_query.message, user_id)


@router.callback_query(StateFilter(None), lambda c: c.data.startswith("manual_sub_"))
async def manual_sub_callback(callback_query: types.CallbackQuery, state: FSMContext):
    parts = callback_query.data.split('_')
    user_id = int(parts[2])
    sub_type = parts[3]
    await callback_query.answer()
    await state.set_state("waiting_sub_days")
    await state.update_data(user_id = user_id, sub_type = sub_type)

    sub_name = SUBS_TYPE[sub_type]['name']

    await callback_query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è {sub_name} –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
    )


@router.callback_query(lambda c: c.data.startswith("cancel_subscription_"))
async def cancel_subscription_callback(callback_query: types.CallbackQuery, bot: Bot):
    user_id = int(callback_query.data.split('_')[-1])
    await callback_query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    await bot.send_message(logger_chat, f"–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    await execute_query(
        "UPDATE users SET subscription = NULL, subscription_date = NULL WHERE user_id = $1",
        (user_id,)
    )

    await show_user_profile(callback_query.message, user_id)


@router.callback_query(lambda c: c.data.startswith("add_referrals_"))
async def add_referrals_callback(callback_query: types.CallbackQuery, bot: Bot):
    parts = callback_query.data.split('_')
    user_id = int(parts[2])
    amount = int(parts[3])

    await bot.send_message(logger_chat, f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}!")
    await execute_query(
        "UPDATE users SET referrals_paid = referrals_paid + $1 WHERE user_id = $2",
        (amount, user_id)
    )
    await callback_query.message.edit_text(text = f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}!",
                                           reply_markup = None)
    await show_user_profile(callback_query.message, user_id)


@router.callback_query(StateFilter(None), lambda c: c.data.startswith("manual_referrals_"))
async def manual_referrals_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split('_')[-1])
    await callback_query.answer()
    await state.set_state("waiting_referrals_amount")
    await state.update_data(user_id = user_id)

    await callback_query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
    )


@router.callback_query(lambda c: c.data.startswith("add_paidspreads_"))
async def add_paid_spreads_callback(callback_query: types.CallbackQuery, bot: Bot):
    parts = callback_query.data.split('_')
    user_id = int(parts[2])
    amount = int(parts[3])

    await bot.send_message(logger_chat, f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}!")
    await execute_query(
        "UPDATE users SET paid_spreads = paid_spreads + $1 WHERE user_id = $2",
        (amount, user_id)
    )
    await callback_query.message.edit_text(text = f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}!",
                                           reply_markup = None)
    await show_user_profile(callback_query.message, user_id)


@router.callback_query(StateFilter(None), lambda c: c.data.startswith("manual_paidspreads_"))
async def manual_paid_spreads_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split('_')[-1])
    await callback_query.answer()
    await state.set_state("waiting_paid_spreads_amount")
    await state.update_data(user_id = user_id)

    await callback_query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
    )


@router.callback_query(lambda c: c.data.startswith("back_to_profile_"))
async def back_to_profile_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[-1])
    await callback_query.message.delete()
    await callback_query.answer()
    await show_user_profile(callback_query.message, user_id)


@router.message(AdminStates.waiting_meanings_amount)
async def process_meanings_amount(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")

    try:
        amount = int(message.text.strip())
        if amount <= 0:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        await execute_query(
            "UPDATE users SET paid_meanings = paid_meanings + $1 WHERE user_id = $2",
            (amount, user_id)
        )

        await message.reply(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}.")

        await state.clear()

        await show_user_profile(message, user_id)

    except ValueError:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


@router.message(AdminStates.waiting_coupon_amount)
async def process_coupon_amount(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    coupon_type = data.get("coupon_type")

    try:
        amount = int(message.text.strip())
        if amount <= 0:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        column = COUPONS[coupon_type]["field"]

        await execute_query(
            f"UPDATE users SET {column} = {column} + $1 WHERE user_id = $2",
            (amount, user_id)
        )

        coupon_name = COUPONS[coupon_type]["fname"]

        await message.reply(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} {coupon_name} –∫—É–ø–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}.")

        await state.clear()

        await show_user_profile(message, user_id)

    except ValueError:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


@router.message(AdminStates.waiting_sub_days)
async def process_sub_days(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    sub_type = data.get("sub_type")

    try:
        days = int(message.text.strip())
        if days <= 0:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        current_sub_data = await execute_query(
            "SELECT subscription_date FROM users WHERE user_id = $1", (user_id,)
        )

        if current_sub_data and current_sub_data[0] and current_sub_data[0][0]:
            current_date = datetime.strptime(current_sub_data[0][0], "%Y-%m-%d")
            new_date = current_date + timedelta(days = days)
        else:
            new_date = datetime.now() + timedelta(days = days)

        await execute_query(
            "UPDATE users SET subscription = $1, subscription_date = $2 WHERE user_id = $3",
            (sub_type, new_date.strftime("%Y-%m-%d"), user_id)
        )

        sub_name = SUBS_TYPE[sub_type]['name']

        await message.reply(
            f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {sub_name} –Ω–∞ {days} –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.\n"
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_date.strftime('%Y-%m-%d')}"
        )

        await state.clear()

        await show_user_profile(message, user_id)

    except ValueError:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


@router.message(AdminStates.waiting_referrals_amount)
async def process_referrals_amount(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")

    try:
        amount = int(message.text.strip())
        if amount <= 0:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        await execute_query(
            "UPDATE users SET referrals_paid = referrals_paid + $1 WHERE user_id = $2",
            (amount, user_id)
        )

        await message.reply(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}.")

        await state.clear()

        await show_user_profile(message, user_id)

    except ValueError:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


@router.message(AdminStates.waiting_paid_spreads_amount)
async def process_paid_spreads_amount(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")

    try:
        amount = int(message.text.strip())
        if amount <= 0:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        await execute_query(
            "UPDATE users SET paid_spreads = paid_spreads + $1 WHERE user_id = $2",
            (amount, user_id)
        )

        await message.reply(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}.")

        await state.clear()

        await show_user_profile(message, user_id)

    except ValueError:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
