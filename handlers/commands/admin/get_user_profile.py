from datetime import timedelta, datetime

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import os
import time
from aiogram import types, F, Router, Bot
from aiogram.types import Message, InputFile

from constants import DECK_MAP, SUBS_TYPE
from database import execute_select_all, execute_query, execute_select
from filters.baseFilters import IsAdmin
from aiogram import F, Bot
from aiogram.types import Message

from functions.cards.create import get_buffered_image
from functions.statistics.globalStats import generate_stats_image
from handlers.commands.user import get_user_profile

router = Router()


@router.message(IsAdmin(), F.text.lower().startswith("/profile"))
async def admin_view_profile(message: types.Message, bot: Bot):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ ID, —é–∑–µ—Ä–Ω–µ–π–º—É –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""

    args = message.text.split()

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç (ID –∏–ª–∏ username)
    elif len(args) > 1:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç —á–∏—Å–ª–æ–º (ID)
        if args[1].isdigit():
            user_id = int(args[1])
        # –ò–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ username
        else:
            username = args[1].lstrip('@')
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ username
            user_id_result = await execute_query("SELECT user_id FROM users WHERE username = $1", (username,))
            if user_id_result and user_id_result[0]:
                user_id = user_id_result[0][0]
            else:
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
    else:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    await show_user_profile(message, user_id)


async def show_user_profile(message, user_id):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile = await get_user_profile(user_id)

    if not user_profile or not user_profile[0]:
        await message.reply(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    profile_data = user_profile[0]

    deck_type = profile_data[0]
    subscription = profile_data[1]
    subscription_date = profile_data[2]
    day_follow = {
        "moon_follow": profile_data[3],
        "day_card_follow": profile_data[4],
        "week_card_follow": profile_data[5],
        "month_card_follow": profile_data[6],
    }
    interactions = profile_data[7]
    booster = profile_data[8]
    referrals_ids = profile_data[9]
    paid_meanings = profile_data[10]
    coupon_gold = profile_data[11]
    coupon_silver = profile_data[12]
    coupon_iron = profile_data[13]

    coupons = (f"{coupon_gold} –∑–æ–ª–æ—Ç{'—ã—Ö' if coupon_gold != 1 else '–æ–π'}, "
               f"{coupon_silver} —Å–µ—Ä–µ–±—Ä—è–Ω{'—ã—Ö' if coupon_silver != 1 else '—ã–π'}, "
               f"{coupon_iron} –∂–µ–ª–µ–∑–Ω{'—ã—Ö' if coupon_iron != 1 else '—ã–π'}")

    deck_type = DECK_MAP[deck_type] if deck_type else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    subscription = SUBS_TYPE[subscription] if subscription else "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏"

    subscription_date = subscription_date if subscription_date else "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏"
    interactions = interactions if interactions else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    booster = '–î–∞' if booster else '–ù–µ—Ç'

    paid_meanings = paid_meanings if paid_meanings else "0"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è day_follow –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    moon_follow = "–ï—Å—Ç—å" if day_follow['moon_follow'] else '–ù–µ—Ç'
    day_card_follow = "–ï—Å—Ç—å" if day_follow['day_card_follow'] else '–ù–µ—Ç'
    week_card_follow = "–ï—Å—Ç—å" if day_follow['week_card_follow'] else '–ù–µ—Ç'
    month_card_follow = "–ï—Å—Ç—å" if day_follow['month_card_follow'] else '–ù–µ—Ç'

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    profile_text = (
        f"üìã <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> (ID: {user_id})\n\n"
        f"<b>–ö–æ–ª–æ–¥–∞:</b> {deck_type}\n"
        f"<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription}\n"
        f"<b>–ö–æ–Ω–µ—Ü –ø–æ–¥–ø–∏—Å–∫–∏:</b> {subscription_date}\n"
        f"<b>–ö–æ–ª-–≤–æ —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫ –æ—Ç –õ–∏:</b> {paid_meanings}\n"
        f"<b>–†–∞—Å—Å—ã–ª–∫–∏:</b>\n"
        f"    üåô –õ—É–Ω–∞: {moon_follow}\n"
        f"    üåû –†–∞—Å–∫–ª–∞–¥ –¥–Ω—è: {day_card_follow}\n"
        f"    üìÖ –†–∞—Å–∫–ª–∞–¥ –Ω–µ–¥–µ–ª–∏: {week_card_follow}\n"
        f"    üìÜ –†–∞—Å–∫–ª–∞–¥ –º–µ—Å—è—Ü–∞: {month_card_follow}\n"
        f"<b>–ö—É–ø–æ–Ω—ã:</b> {coupons}\n"
        f"<b>–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:</b> {interactions}\n"
        f"<b>–ë—É—Å—Ç:</b> {booster}\n"
    )

    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∞–¥–º–∏–Ω—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    admin_profile_keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text = "‚ûï –¢—Ä–∞–∫—Ç–æ–≤–∫–∏", callback_data = f"admin_meanings_{user_id}"),
                InlineKeyboardButton(text = "üí∞ –ö—É–ø–æ–Ω—ã", callback_data = f"admin_coupons_{user_id}")
            ],
            [
                InlineKeyboardButton(text = "üîÑ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data = f"admin_subscription_{user_id}"),
                InlineKeyboardButton(text = "üë• –î—Ä—É–∑—å—è", callback_data = f"admin_referrals_{user_id}")
            ],
            [
                InlineKeyboardButton(text = "üîô –ù–∞–∑–∞–¥", callback_data = f"admin_back_{user_id}")
            ]
        ]
    )

    await message.answer(profile_text, reply_markup = admin_profile_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫
@router.callback_query(lambda c: c.data.startswith("admin_meanings_"))
async def admin_meanings_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[-1])

    meanings_keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text = "+1", callback_data = f"add_meanings_{user_id}_1"),
                InlineKeyboardButton(text = "+3", callback_data = f"add_meanings_{user_id}_3"),
                InlineKeyboardButton(text = "+5", callback_data = f"add_meanings_{user_id}_5")
            ],
            [
                InlineKeyboardButton(text = "+10", callback_data = f"add_meanings_{user_id}_10"),
                InlineKeyboardButton(text = "+20", callback_data = f"add_meanings_{user_id}_20"),
                InlineKeyboardButton(text = "+50", callback_data = f"add_meanings_{user_id}_50")
            ],
            [
                InlineKeyboardButton(text = "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data = f"manual_meanings_{user_id}")
            ],
            [
                InlineKeyboardButton(text = "üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data = f"back_to_profile_{user_id}")
            ]
        ]
    )

    await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):",
        reply_markup = meanings_keyboard
    )
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫—É–ø–æ–Ω–æ–≤
@router.callback_query(lambda c: c.data.startswith("admin_coupons_"))
async def admin_coupons_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[-1])

    coupons_keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text = "–ó–æ–ª–æ—Ç—ã–µ", callback_data = f"coupon_type_{user_id}_gold")
            ],
            [
                InlineKeyboardButton(text = "–°–µ—Ä–µ–±—Ä—è–Ω—ã–µ", callback_data = f"coupon_type_{user_id}_silver")
            ],
            [
                InlineKeyboardButton(text = "–ñ–µ–ª–µ–∑–Ω—ã–µ", callback_data = f"coupon_type_{user_id}_iron")
            ],
            [
                InlineKeyboardButton(text = "üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data = f"back_to_profile_{user_id}")
            ]
        ]
    )

    await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É–ø–æ–Ω–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):",
        reply_markup = coupons_keyboard
    )
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–æ–≤ –∫—É–ø–æ–Ω–æ–≤
@router.callback_query(lambda c: c.data.startswith("coupon_type_"))
async def coupon_type_callback(callback_query: types.CallbackQuery):
    parts = callback_query.data.split('_')
    user_id = int(parts[2])
    coupon_type = parts[3]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∫—É–ø–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    coupon_name = {
        "gold": "–∑–æ–ª–æ—Ç—ã—Ö",
        "silver": "—Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö",
        "iron": "–∂–µ–ª–µ–∑–Ω—ã—Ö"
    }.get(coupon_type, "")

    coupon_amount_keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text = "+1", callback_data = f"add_coupon_{user_id}_{coupon_type}_1"),
                InlineKeyboardButton(text = "+3", callback_data = f"add_coupon_{user_id}_{coupon_type}_3"),
                InlineKeyboardButton(text = "+5", callback_data = f"add_coupon_{user_id}_{coupon_type}_5")
            ],
            [
                InlineKeyboardButton(text = "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data = f"manual_coupon_{user_id}_{coupon_type}")
            ],
            [
                InlineKeyboardButton(text = "üîô –ù–∞–∑–∞–¥ –∫ –∫—É–ø–æ–Ω–∞–º", callback_data = f"admin_coupons_{user_id}")
            ]
        ]
    )

    await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {coupon_name} –∫—É–ø–æ–Ω–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):",
        reply_markup = coupon_amount_keyboard
    )
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(lambda c: c.data.startswith("admin_subscription_"))
async def admin_subscription_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[-1])

    subscription_keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text = "–ë–∞–∑–æ–≤–∞—è", callback_data = f"sub_type_{user_id}_1")
            ],
            [
                InlineKeyboardButton(text = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è", callback_data = f"sub_type_{user_id}_2")
            ],
            [
                InlineKeyboardButton(text = "–ü—Ä–µ–º–∏—É–º", callback_data = f"sub_type_{user_id}_3")
            ],
            [
                InlineKeyboardButton(text = "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data = f"cancel_subscription_{user_id}")
            ],
            [
                InlineKeyboardButton(text = "üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data = f"back_to_profile_{user_id}")
            ]
        ]
    )

    await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}):",
        reply_markup = subscription_keyboard
    )
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(lambda c: c.data.startswith("sub_type_"))
async def sub_type_callback(callback_query: types.CallbackQuery):
    parts = callback_query.data.split('_')
    user_id = int(parts[2])
    sub_type = parts[3]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    sub_name = {
        "1": "–±–∞–∑–æ–≤–æ–π",
        "2": "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π",
        "3": "–ø—Ä–µ–º–∏—É–º"
    }.get(sub_type, "")

    sub_duration_keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text = "7 –¥–Ω–µ–π", callback_data = f"add_sub_{user_id}_{sub_type}_7"),
                InlineKeyboardButton(text = "14 –¥–Ω–µ–π", callback_data = f"add_sub_{user_id}_{sub_type}_14")
            ],
            [
                InlineKeyboardButton(text = "30 –¥–Ω–µ–π", callback_data = f"add_sub_{user_id}_{sub_type}_30"),
                InlineKeyboardButton(text = "90 –¥–Ω–µ–π", callback_data = f"add_sub_{user_id}_{sub_type}_90")
            ],
            [
                InlineKeyboardButton(text = "180 –¥–Ω–µ–π", callback_data = f"add_sub_{user_id}_{sub_type}_180"),
                InlineKeyboardButton(text = "365 –¥–Ω–µ–π", callback_data = f"add_sub_{user_id}_{sub_type}_365")
            ],
            [
                InlineKeyboardButton(text = "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data = f"manual_sub_{user_id}_{sub_type}")
            ],
            [
                InlineKeyboardButton(text = "üîô –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º", callback_data = f"admin_subscription_{user_id}")
            ]
        ]
    )

    await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ {sub_name} –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}):",
        reply_markup = sub_duration_keyboard
    )
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥—Ä—É–∑–µ–π (—Ä–µ—Ñ–µ—Ä—Ä–∞–ª–æ–≤)
@router.callback_query(lambda c: c.data.startswith("admin_referrals_"))
async def admin_referrals_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[-1])

    referrals_keyboard = InlineKeyboardMarkup(
        inline_keyboard = [
            [
                InlineKeyboardButton(text = "+1", callback_data = f"add_referrals_{user_id}_1"),
                InlineKeyboardButton(text = "+3", callback_data = f"add_referrals_{user_id}_3"),
                InlineKeyboardButton(text = "+5", callback_data = f"add_referrals_{user_id}_5")
            ],
            [
                InlineKeyboardButton(text = "+10", callback_data = f"add_referrals_{user_id}_10"),
                InlineKeyboardButton(text = "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data = f"manual_referrals_{user_id}")
            ],
            [
                InlineKeyboardButton(text = "üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data = f"back_to_profile_{user_id}")
            ]
        ]
    )

    await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π (—Ä–µ—Ñ–µ—Ä—Ä–∞–ª–æ–≤) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):",
        reply_markup = referrals_keyboard
    )
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫
@router.callback_query(lambda c: c.data.startswith("add_meanings_"))
async def add_meanings_callback(callback_query: types.CallbackQuery):
    parts = callback_query.data.split('_')
    user_id = int(parts[2])
    amount = int(parts[3])

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await execute_query(
        "UPDATE users SET paid_meanings = paid_meanings + $1 WHERE user_id = $2",
        (amount, user_id)
    )

    await callback_query.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await show_user_profile(callback_query.message, user_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫
@router.callback_query(lambda c: c.data.startswith("manual_meanings_"))
async def manual_meanings_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split('_')[-1])

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    await state.set_state("waiting_meanings_amount")
    await state.update_data(user_id = user_id)

    await callback_query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
    )
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–æ–≤
@router.callback_query(lambda c: c.data.startswith("add_coupon_"))
async def add_coupon_callback(callback_query: types.CallbackQuery):
    parts = callback_query.data.split('_')
    user_id = int(parts[2])
    coupon_type = parts[3]
    amount = int(parts[4])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –≤ –ë–î –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫—É–ø–æ–Ω–∞
    column = {
        "gold": "coupon_gold",
        "silver": "coupon_silver",
        "iron": "coupon_iron"
    }.get(coupon_type)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫—É–ø–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await execute_query(
        f"UPDATE users SET {column} = {column} + $1 WHERE user_id = $2",
        (amount, user_id)
    )

    coupon_name = {
        "gold": "–∑–æ–ª–æ—Ç—ã—Ö",
        "silver": "—Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö",
        "iron": "–∂–µ–ª–µ–∑–Ω—ã—Ö"
    }.get(coupon_type, "")

    await callback_query.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} {coupon_name} –∫—É–ø–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await show_user_profile(callback_query.message, user_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—É–ø–æ–Ω–æ–≤
@router.callback_query(lambda c: c.data.startswith("manual_coupon_"))
async def manual_coupon_callback(callback_query: types.CallbackQuery, state: FSMContext):
    parts = callback_query.data.split('_')
    user_id = int(parts[2])
    coupon_type = parts[3]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    await state.set_state("waiting_coupon_amount")
    await state.update_data(user_id = user_id, coupon_type = coupon_type)

    coupon_name = {
        "gold": "–∑–æ–ª–æ—Ç—ã—Ö",
        "silver": "—Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö",
        "iron": "–∂–µ–ª–µ–∑–Ω—ã—Ö"
    }.get(coupon_type, "")

    await callback_query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {coupon_name} –∫—É–ø–æ–Ω–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
    )
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(lambda c: c.data.startswith("add_sub_"))
async def add_subscription_callback(callback_query: types.CallbackQuery):
    parts = callback_query.data.split('_')
    user_id = int(parts[2])
    sub_type = parts[3]
    days = int(parts[4])

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    current_sub_data = await execute_query(
        "SELECT subscription_date FROM users WHERE user_id = $1", (user_id,)
    )

    if current_sub_data and current_sub_data[0] and current_sub_data[0][0]:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –µ—ë
        current_date = datetime.strptime(current_sub_data[0][0], "%Y-%m-%d")
        new_date = current_date + timedelta(days = days)
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é
        new_date = datetime.now() + timedelta(days = days)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await execute_query(
        "UPDATE users SET subscription = $1, subscription_date = $2 WHERE user_id = $3",
        (sub_type, new_date.strftime("%Y-%m-%d"), user_id)
    )

    sub_name = {
        "1": "–ë–∞–∑–æ–≤–∞—è",
        "2": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è",
        "3": "–ü—Ä–µ–º–∏—É–º"
    }.get(sub_type, "")

    await callback_query.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {sub_name} –Ω–∞ {days} –¥–Ω–µ–π!")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await show_user_profile(callback_query.message, user_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(lambda c: c.data.startswith("manual_sub_"))
async def manual_sub_callback(callback_query: types.CallbackQuery, state: FSMContext):
    parts = callback_query.data.split('_')
    user_id = int(parts[2])
    sub_type = parts[3]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    await state.set_state("waiting_sub_days")
    await state.update_data(user_id = user_id, sub_type = sub_type)

    sub_name = {
        "1": "–±–∞–∑–æ–≤–æ–π",
        "2": "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π",
        "3": "–ø—Ä–µ–º–∏—É–º"
    }.get(sub_type, "")

    await callback_query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è {sub_name} –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
    )
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(lambda c: c.data.startswith("cancel_subscription_"))
async def cancel_subscription_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[-1])

    # –û–±–Ω—É–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await execute_query(
        "UPDATE users SET subscription = NULL, subscription_date = NULL WHERE user_id = $1",
        (user_id,)
    )

    await callback_query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await show_user_profile(callback_query.message, user_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä—Ä–∞–ª–æ–≤
@router.callback_query(lambda c: c.data.startswith("add_referrals_"))
async def add_referrals_callback(callback_query: types.CallbackQuery):
    parts = callback_query.data.split('_')
    user_id = int(parts[2])
    amount = int(parts[3])

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await execute_query(
        "UPDATE users SET referrals_paid = referrals_paid + $1 WHERE user_id = $2",
        (amount, user_id)
    )

    await callback_query.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await show_user_profile(callback_query.message, user_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä—Ä–∞–ª–æ–≤
@router.callback_query(lambda c: c.data.startswith("manual_referrals_"))
async def manual_referrals_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = int(callback_query.data.split('_')[-1])

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    await state.set_state("waiting_referrals_amount")
    await state.update_data(user_id = user_id)

    await callback_query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}):\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
    )
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é
@router.callback_query(lambda c: c.data.startswith("back_to_profile_"))
async def back_to_profile_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[-1])

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_user_profile(callback_query.message, user_id)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π
@router.message(state = "waiting_meanings_amount")
async def process_meanings_amount(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_id = data.get("user_id")

    try:
        amount = int(message.text.strip())
        if amount <= 0:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await execute_query(
            "UPDATE users SET paid_meanings = paid_meanings + $1 WHERE user_id = $2",
            (amount, user_id)
        )

        await message.reply(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}.")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await show_user_profile(message, user_id)

    except ValueError:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


@router.message(state = "waiting_coupon_amount")
async def process_coupon_amount(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_id = data.get("user_id")
    coupon_type = data.get("coupon_type")

    try:
        amount = int(message.text.strip())
        if amount <= 0:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –≤ –ë–î –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫—É–ø–æ–Ω–∞
        column = {
            "gold": "coupon_gold",
            "silver": "coupon_silver",
            "iron": "coupon_iron"
        }.get(coupon_type)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫—É–ø–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await execute_query(
            f"UPDATE users SET {column} = {column} + $1 WHERE user_id = $2",
            (amount, user_id)
        )

        coupon_name = {
            "gold": "–∑–æ–ª–æ—Ç—ã—Ö",
            "silver": "—Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö",
            "iron": "–∂–µ–ª–µ–∑–Ω—ã—Ö"
        }.get(coupon_type, "")

        await message.reply(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} {coupon_name} –∫—É–ø–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}.")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await show_user_profile(message, user_id)

    except ValueError:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


@router.message(state = "waiting_sub_days")
async def process_sub_days(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_id = data.get("user_id")
    sub_type = data.get("sub_type")

    try:
        days = int(message.text.strip())
        if days <= 0:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        current_sub_data = await execute_query(
            "SELECT subscription_date FROM users WHERE user_id = $1", (user_id,)
        )

        if current_sub_data and current_sub_data[0] and current_sub_data[0][0]:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –µ—ë
            current_date = datetime.strptime(current_sub_data[0][0], "%Y-%m-%d")
            new_date = current_date + timedelta(days = days)
        else:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é
            new_date = datetime.now() + timedelta(days = days)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await execute_query(
            "UPDATE users SET subscription = $1, subscription_date = $2 WHERE user_id = $3",
            (sub_type, new_date.strftime("%Y-%m-%d"), user_id)
        )

        sub_name = {
            "1": "–ë–∞–∑–æ–≤–∞—è",
            "2": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è",
            "3": "–ü—Ä–µ–º–∏—É–º"
        }.get(sub_type, "")

        await message.reply(
            f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {sub_name} –Ω–∞ {days} –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.\n"
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_date.strftime('%Y-%m-%d')}"
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await show_user_profile(message, user_id)

    except ValueError:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


@router.message(state = "waiting_referrals_amount")
async def process_referrals_amount(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_id = data.get("user_id")

    try:
        amount = int(message.text.strip())
        if amount <= 0:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await execute_query(
            "UPDATE users SET referrals_paid = referrals_paid + $1 WHERE user_id = $2",
            (amount, user_id)
        )

        await message.reply(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –¥—Ä—É–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}.")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await show_user_profile(message, user_id)

    except ValueError:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM (Finite State Machine)
class AdminStates(StatesGroup):
    waiting_meanings_amount = State()
    waiting_coupon_amount = State()
    waiting_sub_days = State()
    waiting_referrals_amount = State()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ ID —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(IsAdmin(), F.text.lower().startswith("/find"))
async def find_user(message: types.Message):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ ID"""
    args = message.text.split()

    if len(args) < 2:
        await message.reply("–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /find <–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID>")
        return

    search_term = args[1].lstrip('@')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–∏—Å–ª–æ–º (ID)
    if search_term.isdigit():
        user_id = int(search_term)
        user_profile = await execute_query("SELECT user_id, username, first_name FROM users WHERE user_id = $1",
                                           (user_id,))
    else:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ (username –∏–ª–∏ first_name)
        user_profile = await execute_query(
            "SELECT user_id, username, first_name FROM users WHERE username ILIKE $1 OR first_name ILIKE $1",
            (f"%{search_term}%",)
        )

    if not user_profile:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    elif len(user_profile) == 1:
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å
        user_id = user_profile[0][0]
        await show_user_profile(message, user_id)
    else:
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        found_users_text = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        user_buttons = []

        for user in user_profile[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            user_id = user[0]
            username = user[1] if user[1] else "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            first_name = user[2] if user[2] else "–ù–µ—Ç –∏–º–µ–Ω–∏"

            found_users_text += f"ID: {user_id}, @{username}, {first_name}\n"
            user_buttons.append([InlineKeyboardButton(
                text = f"üë§ {username or first_name} (ID: {user_id})",
                callback_data = f"show_profile_{user_id}"
            )])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        user_buttons.append([InlineKeyboardButton(text = "‚ùå –û—Ç–º–µ–Ω–∞", callback_data = "cancel_search")])

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        found_users_keyboard = InlineKeyboardMarkup(inline_keyboard = user_buttons)

        await message.reply(found_users_text, reply_markup = found_users_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
@router.callback_query(lambda c: c.data.startswith("show_profile_"))
async def show_profile_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[-1])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_user_profile(callback_query.message, user_id)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞
@router.callback_query(lambda c: c.data == "cancel_search")
async def cancel_search_callback(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(lambda c: c.data.startswith("admin_back_"))
async def admin_back_callback(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
    await callback_query.answer()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
def register_all_states():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM"""
    return [
        ("waiting_meanings_amount", "–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫"),
        ("waiting_coupon_amount", "–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—É–ø–æ–Ω–æ–≤"),
        ("waiting_sub_days", "–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"),
        ("waiting_referrals_amount", "–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥—Ä—É–∑–µ–π")
    ]
