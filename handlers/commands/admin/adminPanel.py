import time
from aiogram import types, F, Router, Bot
from aiogram.types import Message, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import execute_select_all, execute_query
from filters.baseFilters import IsAdmin
from functions.statistics.globalStats import show_statistics

router = Router()


class AdminStates(StatesGroup):
    waiting_for_mailing = State()
    waiting_for_mailing_confirm = State()
    waiting_for_user_id = State()


def get_admin_keyboard():
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(text = "üìä –ö–æ–º–∞–Ω–¥—ã", callback_data = "admin_statistics_handlers"),
        InlineKeyboardButton(text = "üìä –ö–∞—Ä—Ç—ã", callback_data = "admin_statistics_cards"),
        InlineKeyboardButton(text = "üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data = "admin_statistics_users"),
        InlineKeyboardButton(text = "üì£ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º", callback_data = "admin_mailing"),
        InlineKeyboardButton(text = "üîç –£–∑–Ω–∞—Ç—å –ø–æ –∞–π–¥–∏", callback_data = "admin_get_by_id"),
        InlineKeyboardButton(text = "üÜî –£–∑–Ω–∞—Ç—å –∞–π–¥–∏ –º–µ–¥–∏–∞", callback_data = "admin_get_id")
    )

    builder.adjust(2)

    return builder.as_markup()


def get_mailing_keyboard():
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(text = "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data = "admin_back_to_menu")
    )

    builder.adjust(1)

    return builder.as_markup()


def get_confirm_mailing_keyboard():
    builder = InlineKeyboardBuilder()

    builder.add(
        InlineKeyboardButton(text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data = "confirm_mailing"),
        InlineKeyboardButton(text = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data = "cancel_mailing")
    )

    builder.adjust(1)

    return builder.as_markup()


@router.message(IsAdmin(), Command("–ø–∞–Ω"))
async def admin_panel(message: Message):
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:", reply_markup = get_admin_keyboard())


@router.callback_query(IsAdmin(), F.data == "admin_statistics_handlers")
async def show_statistics_handlers(callback: types.CallbackQuery, bot: Bot):
    await show_statistics(callback, "commands", bot)
    await callback.answer()


@router.callback_query(IsAdmin(), F.data == "admin_statistics_cards")
async def show_statistics_cards(callback: types.CallbackQuery, bot: Bot):
    await show_statistics(callback, "cards", bot)
    await callback.answer()


@router.callback_query(IsAdmin(), F.data == "admin_statistics_users")
async def show_users_statistics(callback: types.CallbackQuery, bot: Bot):
    await show_statistics(callback, "users", bot)


@router.callback_query(IsAdmin(), F.data == "admin_mailing")
async def show_mailing_options(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_mailing)
    await callback.message.edit_text(
        "üì£ –†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.\n\n"
        "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML-—Ñ–æ—Ä–º–∞—Ç:\n"
        "<pre>&lt;a href='URL'&gt; —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏ &lt;/a&gt;</pre>",
        parse_mode = "HTML",
        reply_markup = get_mailing_keyboard()
    )
    await callback.answer()


@router.callback_query(IsAdmin(), F.data == "admin_back_to_menu")
async def back_to_admin_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup = get_admin_keyboard())
    await callback.answer()


@router.callback_query(IsAdmin(), F.data == "admin_get_by_id")
async def get_by_id(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_user_id)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ —Å—Å—ã–ª–∫—É:")
    await callback.answer()


@router.message(IsAdmin(), AdminStates.waiting_for_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text.strip())
        user_info = await execute_select_all("SELECT * FROM users WHERE user_id = $1", (user_id,))

        if user_info:
            user_link = f"<a href='tg://user?id={user_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}</a>"
            username = user_info[0].get("username", "–ù–µ—Ç username")
            first_name = user_info[0].get("first_name", "–ù–µ—Ç –∏–º–µ–Ω–∏")

            text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"\
                   f"üÜî ID: {user_id}\n"\
                   f"üë§ –ò–º—è: {first_name}\n"\
                   f"üîó Username: @{username}\n"\
                   f"üì± –°—Å—ã–ª–∫–∞: {user_link}"
        else:
            text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"\
                   f"–°—Å—ã–ª–∫–∞: <a href='tg://user?id={user_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}</a>"

        await message.reply(text, parse_mode = "HTML")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    await state.clear()
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup = get_admin_keyboard())


@router.callback_query(IsAdmin(), F.data == "admin_get_id")
async def get_media_id_mode(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–†–µ–∂–∏–º –ø–æ–ª—É—á–µ–Ω–∏—è ID –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID."
    )
    await callback.answer()


@router.message(IsAdmin(), AdminStates.waiting_for_mailing, F.content_type.in_({'text', 'photo', 'video', 'document'}))
async def process_mailing_message(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(message_id = message.message_id)

    media_type = None
    media_id = None
    caption = None

    if message.photo:
        media_type = "photo"
        media_id = message.photo[-1].file_id
        caption = message.caption or ""
    elif message.video:
        media_type = "video"
        media_id = message.video.file_id
        caption = message.caption or ""
    elif message.document:
        media_type = "document"
        media_id = message.document.file_id
        caption = message.caption or ""
    else:
        media_type = "text"
        caption = message.text

    await state.update_data(
        media_type = media_type,
        media_id = media_id,
        caption = caption
    )

    preview_text = "üì£ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"

    if media_type == "text":
        await message.reply(
            f"{preview_text}{caption}",
            reply_markup = get_confirm_mailing_keyboard(),
            parse_mode = "HTML"
        )
    elif media_type == "photo":
        await bot.send_photo(message.from_user.id, photo = media_id, caption = caption, parse_mode = "HTML")

    elif media_type == "video":
        await bot.send_video(message.from_user.id, video = media_id, caption = caption, parse_mode = "HTML")

    elif media_type == "document":
        await bot.send_document(message.from_user.id, document = media_id, caption = caption, parse_mode = "HTML")

    await message.reply(
        f"–ú–µ–Ω—é",
        reply_markup = get_confirm_mailing_keyboard()
    )

    await state.set_state(AdminStates.waiting_for_mailing_confirm)


@router.callback_query(IsAdmin(), AdminStates.waiting_for_mailing_confirm, F.data == "confirm_mailing")
async def confirm_mailing(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    media_type = data.get("media_type")
    media_id = data.get("media_id")
    caption = data.get("caption")

    await callback.message.edit_text("üîÑ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    users = await execute_select_all("SELECT user_id FROM users")

    count_sent = 0
    count_blocked = 0

    for user_tuple in users:
        user_id = user_tuple[0]
        try:
            if media_type == "text":
                await bot.send_message(user_id, caption, parse_mode = "HTML")
            elif media_type == "photo":
                await bot.send_photo(user_id, photo = media_id, caption = caption, parse_mode = "HTML")
            elif media_type == "video":
                await bot.send_video(user_id, video = media_id, caption = caption, parse_mode = "HTML")
            elif media_type == "document":
                await bot.send_document(user_id, document = media_id, caption = caption, parse_mode = "HTML")

            count_sent += 1
            time.sleep(0.1)
        except Exception as e:
            count_blocked += 1
            await execute_query("DELETE FROM users WHERE user_id = $1", (user_id,))

    await callback.message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"- –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count_sent}\n"
        f"- –ù–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: {count_blocked}"
    )

    await state.clear()
    await callback.message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup = get_admin_keyboard())


@router.callback_query(IsAdmin(), AdminStates.waiting_for_mailing_confirm, F.data == "cancel_mailing")
async def cancel_mailing(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup = get_admin_keyboard())


@router.message(IsAdmin(), F.content_type.in_({'photo', 'video', 'document'}))
async def media_handler(message: Message, state: FSMContext):
    if await state.get_state() is not None:
        return

    if message.photo:
        media_id = message.photo[-1].file_id
    elif message.video:
        media_id = message.video.file_id
    elif message.document:
        media_id = message.document.file_id
    else:
        return

    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text = "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data = "admin_back_to_menu")
    )
    builder.adjust(1)

    await message.reply(
        f"–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç ID –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. \n\n "
        f"<code>{media_id}</code>",
        parse_mode = "HTML",
        reply_markup = builder.as_markup()
    )


@router.message(IsAdmin(), F.text.lower() == "–ø–æ–∫–∞, –¥—Ä—É–∂–æ–∫")
async def get_ban(message: types.Message, bot: Bot):
    if message.chat.type in ['group', 'supergroup']:
        if not message.reply_to_message:
            await message.reply("–û—Ç–ø—Ä–∞–≤—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è.")
        else:
            try:
                replied_user = message.reply_to_message.from_user.id
                name_user = message.reply_to_message.from_user.first_name
                await bot.ban_chat_member(chat_id = message.chat.id, user_id = replied_user)
                await bot.send_message(chat_id = message.chat.id, text = f"–î—Ä—É–∂–æ–∫ {name_user} –∑–∞–±–∞–Ω–µ–Ω, —Ä–∞–¥—É–µ–º—Å—è.")
            except Exception as e:
                await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
