import os
import time
from aiogram import types, F, Router, Bot
from aiogram.types import Message, InputFile

from database import execute_select_all, execute_query, execute_select
from filters.baseFilters import IsAdmin
from aiogram import F, Bot
from aiogram.types import Message

from functions.cards.create import get_buffered_image
from functions.statistics.globalStats import generate_stats_image

router = Router()


@router.message(IsAdmin(), F.text.startswith("–∫—Ç–æ"))
async def get_user(message: types.Message):
    user_id = message.text.split()[1]
    user = f"<a href='tg://user?id={user_id}'>—á–µ–ª</a>"
    text = f"–í–æ—Ç —ç—Ç–æ—Ç –≤–æ—Ç {user}"
    await message.reply(text)


@router.message(IsAdmin(), F.text.startswith("!–≤—Å–µ–º"))
async def mailing(message: types.Message, bot: Bot, admin_id):
    parts = message.text.split()
    if len(parts) < 4:
        await message.reply("Usage: !–≤—Å–µ–º <link> <wordlink> <message>")
        return

    link = parts[1]
    wordlink = parts[2]
    text_parts = parts[3:]
    llink = f"<a href='{link}'>{wordlink}</a>"
    post = f"‚Äî {llink} {' '.join(text_parts)}"

    ids = await execute_select_all("SELECT user_id FROM users")

    count_sent = 0
    count_blocked = 0

    for id_tuple in ids:
        user_id = id_tuple[0]
        try:
            await bot.send_message(user_id, post)
            count_sent += 1
            time.sleep(1)
        except Exception as e:
            count_blocked += 1
            await execute_query("DELETE FROM users WHERE user_id = $1", (user_id,))

    await bot.send_message(admin_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏ {count_sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. {count_blocked} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –õ–∏.")


@router.message(IsAdmin(), F.text.startswith("!!–≤—Å–µ–º"))
async def mailing_1(message: types.Message, bot: Bot, admin_id):
    text_parts = message.text.split()[1:]
    post = f"‚Äî {' '.join(text_parts)}"

    ids = await execute_select_all("SELECT user_id FROM users LIMIT 20")

    count_sent = 0
    count_blocked = 0

    for id_tuple in ids:
        user_id = id_tuple[0]
        try:
            await bot.send_message(user_id, post)
            count_sent += 1
            time.sleep(1)
        except Exception as e:
            count_blocked += 1
            await execute_query("DELETE FROM users WHERE user_id = $1", (user_id,))

    await bot.send_message(admin_id,
                           f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–æ—Å–ª–∞–Ω–æ {count_sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. {count_blocked} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –õ–∏.")


@router.message(IsAdmin(), F.text.lower() == "–ø–æ–∫–∞, –¥—Ä—É–∂–æ–∫")
async def get_ban(message: types.Message, bot: Bot):
    if message.chat.type in ['group', 'supergroup']:
        if not message.reply_to_message:
            await message.reply("–û—Ç–ø—Ä–∞–≤—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è.")
        else:
            try:
                replied_user = message.reply_to_message.from_user.id
                name_user = message.reply_to_message.from_user.first_name
                await bot.ban_chat_member(chat_id = message.chat.id, user_id = replied_user)
                await bot.send_message(chat_id = message.chat.id, text = f"–î—Ä—É–∂–æ–∫ {name_user} –∑–∞–±–∞–Ω–µ–Ω, —Ä–∞–¥—É–µ–º—Å—è.")
            except Exception as e:
                await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


@router.message(F.text.startswith("!—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
async def cmd_stats(message: Message):
    stats = await execute_select_all(
        "SELECT command, daily_count, weekly_count, monthly_count, total_count FROM statistics_handler ORDER BY total_count DESC"
    )

    if stats:
        image = await generate_stats_image(stats)
        await message.answer_photo(photo = await get_buffered_image(image), caption = "–í–æ—Ç –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")
    else:
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞.")


@router.message(IsAdmin(), F.content_type.in_({'photo', 'video', 'document'}))
async def media_handler(message: Message, bot: Bot, logger_chat):
    if message.photo:
        media_id = message.photo[-1].file_id
    elif message.video:
        media_id = message.video.file_id
    elif message.document:
        media_id = message.document.file_id
    else:
        return

    await bot.send_message(logger_chat, f"Media ID: `{media_id}`", parse_mode = "Markdown")
