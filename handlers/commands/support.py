from aiogram import Router, F, types, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import load_config

router = Router()

config = load_config()
support_chat = config.tg_bot.support_chat


class SupportState(StatesGroup):
    waiting_for_question = State()
    waiting_for_answer = State()


@router.message(F.text.lower() == "–ø–æ–º–æ—â—å")
@router.callback_query(F.data == "get_support")
async def help_command(event: Message | CallbackQuery):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text = "üìù –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É", callback_data = "ask_support")

    text = (
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–æ–π-—Ç–æ –≤–æ–ø—Ä–æ—Å, –∂–∞–ª–æ–±–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, "
        "–≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –Ω–∞–ø–∏—à–∏—Ç–µ. "
        "–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –Ω–∏–∫–∞–∫–∏—Ö —Ñ–∞–π–ª–æ–≤.\n\n"
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ç ‚Äî https://telegra.ph/Lesnoj-Duh-Li-10-10."
    )

    if isinstance(event, Message):
        await event.answer(text, reply_markup = keyboard.as_markup())
    elif isinstance(event, CallbackQuery):
        keyboard.button(text = "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data = "get_my_profile")
        keyboard.adjust(1)
        await event.message.edit_text(text, reply_markup = keyboard.as_markup())


@router.callback_query(F.data == "ask_support")
async def ask_question(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:")
    await state.set_state(SupportState.waiting_for_question)
    await callback.answer()


@router.message(SupportState.waiting_for_question)
async def receive_question(message: Message, bot: Bot, state: FSMContext):
    await state.clear()

    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = f"(@{message.from_user.username})" if message.from_user.username else ""

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text = "‚úâ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data = f"reply_{user_id}")
    keyboard.button(text = "üë§ –ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°", url = f"tg://user?id={user_id}")

    await bot.send_message(
        support_chat,
        f"üì© *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {full_name}* {username}:\n\n"
        f"{message.text}",
        parse_mode = "Markdown",
        reply_markup = keyboard.as_markup(),
    )

    await message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")


@router.callback_query(F.data.startswith("reply_"))
async def ask_admin_reply(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[1])
    await state.update_data(user_id = user_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
    await state.set_state(SupportState.waiting_for_answer)
    await callback.answer()


@router.message(SupportState.waiting_for_answer)
async def send_admin_reply(message: Message, bot: Bot, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")

    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    await state.clear()

    await bot.send_message(
        user_id,
        f"üì¨ *–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*\n\n{message.text}",
        parse_mode = "Markdown"
    )

    await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
