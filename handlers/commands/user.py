from aiogram import types, Router, Bot, F
from aiogram.types import CallbackQuery, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hlink
from datetime import datetime
import pytz
import pendulum

from constants import DECK_MAP, SUBS_TYPE
from database import execute_query, execute_select_all
from filters.subscriptions import SubscriptionLevel
from functions.cards.create import get_buffered_image
from functions.messages.messages import typing_animation_decorator
from functions.statistics.getUserStats import get_user_statistics
from keyboard import menu_private_keyboard, profile_keyboard
from middlewares.statsUser import UserStatisticsMiddleware

router = Router()
router.message.middleware(UserStatisticsMiddleware())
router.callback_query.middleware(UserStatisticsMiddleware())


@router.message(F.text.lower() == "–º–µ–Ω—é")
async def get_menu(message: types.Message):
    if message.chat.type == "private":
        await message.reply(f'–í–æ—Ç —Ç–µ–±–µ –º–µ–Ω—é!',
                            reply_markup = menu_private_keyboard)


async def get_user_profile(user_id: int):
    query = """
    SELECT cards_type, subscription, subscription_date, moon_follow, day_card_follow, 
           week_card_follow, month_card_follow, total_count as interactions, boosted, referrals, paid_meanings,
           coupon_gold, coupon_silver, coupon_iron
    FROM users
    WHERE user_id = $1
    """
    return await execute_select_all(query, (user_id,))


@router.callback_query(F.data == "get_user_statistics", SubscriptionLevel(1), flags = {"use_user_statistics": True})
@typing_animation_decorator(initial_message = "–í—ã—á–∏—Å–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def get_formatted_card_statistics(callback_query: types.CallbackQuery, bot):
    await callback_query.answer()
    image = await get_user_statistics(callback_query.from_user.id)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text = "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data = "get_my_profile")

    await bot.edit_message_media(chat_id = callback_query.message.chat.id,
                                 message_id = callback_query.message.message_id,
                                 media = InputMediaPhoto(media = await get_buffered_image(image)),
                                 reply_markup = keyboard.as_markup())


@router.message(F.text.lower() == "–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def generate_profile_summary_cmd(message: types.Message, bot: Bot):
    if message.chat.type == "private":
        await generate_profile_summary(message, bot)
    else:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")


@router.callback_query(F.data == "get_my_profile")
async def generate_profile_summary_cmd(call, bot: Bot):
    if call.message.chat.type == "private":
        await generate_profile_summary(call, bot)
    else:
        await call.message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")


async def generate_profile_summary(message, bot: Bot):
    user_id = message.from_user.id
    cb = False

    if isinstance(message, CallbackQuery):
        message = message.message
        cb = True

    user_profile = await get_user_profile(user_id)

    profile_data = user_profile[0]

    deck_type = profile_data[0] if profile_data[0] else None
    subscription = profile_data[1]
    subscription_date = profile_data[2]
    day_follow = {
        "moon_follow": profile_data[3],
        "day_card_follow": profile_data[4],
        "week_card_follow": profile_data[5],
        "month_card_follow": profile_data[6],
    }
    interactions = profile_data[7]
    booster = profile_data[8]
    referrals_ids = profile_data[9]
    paid_meanings = profile_data[10]
    coupon_gold = profile_data[11]
    coupon_silver = profile_data[12]
    coupon_iron = profile_data[13]

    coupons = (f"{coupon_gold} –∑–æ–ª–æ—Ç{'—ã—Ö' if coupon_gold != 1 else '–æ–π'}, "
               f"{coupon_silver} —Å–µ—Ä–µ–±—Ä—è–Ω{'—ã—Ö' if coupon_silver != 1 else '—ã–π'}, "
               f"{coupon_iron} –∂–µ–ª–µ–∑–Ω{'—ã—Ö' if coupon_iron != 1 else '—ã–π'}")

    deck_type = DECK_MAP[deck_type] if deck_type else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    subscription = SUBS_TYPE[subscription]['name'] if subscription else "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏"

    subscription_date = subscription_date if subscription_date else "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏"
    interactions = interactions if interactions else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    booster = '–î–∞' if booster else '–ù–µ—Ç'

    paid_meanings = paid_meanings if paid_meanings else "0"

    moon_follow = "–ï—Å—Ç—å" if day_follow['moon_follow'] else '–ù–µ—Ç'
    day_card_follow = "–ï—Å—Ç—å" if day_follow['day_card_follow'] else '–ù–µ—Ç'
    week_card_follow = "–ï—Å—Ç—å" if day_follow['week_card_follow'] else '–ù–µ—Ç'
    month_card_follow = "–ï—Å—Ç—å" if day_follow['month_card_follow'] else '–ù–µ—Ç'

    profile_text = (
        f"üìã <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"<b>–ö–æ–ª–æ–¥–∞:</b> {deck_type}\n"
        f"<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription}\n"
        f"<b>–ö–æ–Ω–µ—Ü –ø–æ–¥–ø–∏—Å–∫–∏:</b> {subscription_date}\n"
        f"<b>–ö–æ–ª-–≤–æ —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫ –æ—Ç –õ–∏:</b> {paid_meanings}\n"
        f"<b>–†–∞—Å—Å—ã–ª–∫–∏:</b>\n"
        f"    üåô –õ—É–Ω–∞: {moon_follow}\n"
        f"    üåû –†–∞—Å–∫–ª–∞–¥ –¥–Ω—è: {day_card_follow}\n"
        f"    üìÖ –†–∞—Å–∫–ª–∞–¥ –Ω–µ–¥–µ–ª–∏: {week_card_follow}\n"
        f"    üìÜ –†–∞—Å–∫–ª–∞–¥ –º–µ—Å—è—Ü–∞: {month_card_follow}\n"
        f"<b>–ö—É–ø–æ–Ω—ã:</b> {coupons}\n"
        f"<b>–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:</b> {interactions}\n"
        f"<b>–ë—É—Å—Ç:</b> {booster}\n"
    )
    if cb:
        await message.delete()
        await message.answer(profile_text, reply_markup = profile_keyboard,
                             reply_to_message_id = message.reply_to_message.message_id)
    else:
        await message.answer(profile_text, reply_markup = profile_keyboard, reply_to_message_id = message.message_id)


@router.message(F.text.lower() == "—É—Å–ª—É–≥–∏")
async def services(message: types.Message, bot: Bot):
    if message.chat.type == 'private':
        link = f"https://t.me/forestspiritottarotreviews"
        group = hlink("–≥—Ä—É–ø–ø–µ", link)
        link = f"https://t.me/kmorebi"
        wanderer = hlink("–º–Ω–µ", link)
        await bot.send_message(message.chat.id,
                               text = f"‚Äî –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ç–∑—ã–≤–∞–º–∏ –∏ —É—Å–ª—É–≥–∞–º–∏ –≤ —ç—Ç–æ–π {group} –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –ø–æ —Ä–∞—Å–∫–ª–∞–¥–∞–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è "
                                      f"–∫–æ {wanderer}\n\n")
    else:
        pass


@router.message(F.text.lower().endswith("–±–∏–±–ª–∏–æ—Ç–µ–∫–∞"))
async def get_library(message: types.Message, bot: Bot):
    if message.chat.type == 'private':
        link = hlink('–±–∏–±–ª–∏–æ—Ç–µ–∫—É', 'https://t.me/forestlibraryspirit')
        await bot.send_message(message.chat.id, text = f"‚Äî –ü—Ä–∏–≥–ª–∞—à–∞–µ–º —Ç–µ–±—è –≤ –Ω–∞—à—É {link}.")
    else:
        pass


@router.message(F.text.lower() == "—É–¥–∞–ª–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –¥–Ω—è")
async def delete_day_spread(message: types.Message):
    user_id = message.from_user.id
    new_date = datetime.now(pytz.timezone('Europe/Kiev'))
    date = new_date.strftime("%d.%m")
    await execute_query("delete FROM spreads_day WHERE user_id = $1 and date = $2", (user_id, date,))
    await message.reply("–í–∞—à —Ä–∞—Å–∫–ª–∞–¥ –¥–Ω—è —É–¥–∞–ª–µ–Ω, –Ω–æ –¥–∞–∂–µ –Ω–µ –Ω–∞–π–¥–µ—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–µ –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç—Å—è.")


@router.message(F.text.lower() == "—É–¥–∞–ª–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
async def delete_tomorrow_spread(message: types.Message):
    user_id = message.from_user.id
    tomorrow = pendulum.tomorrow('Europe/Kiev').format('DD.MM')
    await execute_query("delete FROM spreads_day WHERE user_id = $1 and date = $2", (user_id, tomorrow))
    await message.reply("–í–∞—à —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —É–¥–∞–ª–µ–Ω, –Ω–æ –¥–∞–∂–µ –Ω–µ –Ω–∞–π–¥–µ—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–µ –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç—Å—è.")
